// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Vehicle.proto

#include "Vehicle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace Car_msg {
class Common_controlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Common_control>
      _instance;
} _Common_control_default_instance_;
class Common_feedbackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Common_feedback>
      _instance;
} _Common_feedback_default_instance_;
class Ruicheng_controlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ruicheng_control>
      _instance;
} _Ruicheng_control_default_instance_;
class Ruicheng_feedbackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ruicheng_feedback>
      _instance;
} _Ruicheng_feedback_default_instance_;
class CS55_controlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CS55_control>
      _instance;
} _CS55_control_default_instance_;
class CS55_feedbackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CS55_feedback>
      _instance;
} _CS55_feedback_default_instance_;
}  // namespace Car_msg
namespace protobuf_Vehicle_2eproto {
static void InitDefaultsCommon_control() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Car_msg::_Common_control_default_instance_;
    new (ptr) ::Car_msg::Common_control();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Car_msg::Common_control::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Common_control =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCommon_control}, {}};

static void InitDefaultsCommon_feedback() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Car_msg::_Common_feedback_default_instance_;
    new (ptr) ::Car_msg::Common_feedback();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Car_msg::Common_feedback::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Common_feedback =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCommon_feedback}, {}};

static void InitDefaultsRuicheng_control() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Car_msg::_Ruicheng_control_default_instance_;
    new (ptr) ::Car_msg::Ruicheng_control();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Car_msg::Ruicheng_control::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Ruicheng_control =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRuicheng_control}, {}};

static void InitDefaultsRuicheng_feedback() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Car_msg::_Ruicheng_feedback_default_instance_;
    new (ptr) ::Car_msg::Ruicheng_feedback();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Car_msg::Ruicheng_feedback::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Ruicheng_feedback =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRuicheng_feedback}, {}};

static void InitDefaultsCS55_control() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Car_msg::_CS55_control_default_instance_;
    new (ptr) ::Car_msg::CS55_control();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Car_msg::CS55_control::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CS55_control =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCS55_control}, {}};

static void InitDefaultsCS55_feedback() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Car_msg::_CS55_feedback_default_instance_;
    new (ptr) ::Car_msg::CS55_feedback();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Car_msg::CS55_feedback::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CS55_feedback =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCS55_feedback}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Common_control.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Common_feedback.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Ruicheng_control.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Ruicheng_feedback.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CS55_control.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CS55_feedback.base);
}

::google::protobuf::Metadata file_level_metadata[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Common_control, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Common_control, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Common_control, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Common_control, vehicleversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Common_control, targetsteeringangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Common_control, targetsteeringangularvelocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Common_control, targetspeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Common_control, targetacceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Common_control, targetdeceleration_),
  5,
  0,
  1,
  2,
  3,
  4,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Common_feedback, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Common_feedback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Common_feedback, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Common_feedback, steer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Common_feedback, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Common_feedback, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Common_feedback, speedlfwheel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Common_feedback, speedrfwheel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Common_feedback, speedlbwheel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Common_feedback, speedrbwheel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Common_feedback, vehicleversion_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Ruicheng_control, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Ruicheng_control, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Ruicheng_control, targetsteeringangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Ruicheng_control, targetspeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Ruicheng_control, targetledstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Ruicheng_control, lightswitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Ruicheng_control, speedgear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Ruicheng_control, timestamp_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Ruicheng_feedback, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Ruicheng_feedback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Ruicheng_feedback, embrakerstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Ruicheng_feedback, epsstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Ruicheng_feedback, torquestatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Ruicheng_feedback, decstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Ruicheng_feedback, sysstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Ruicheng_feedback, ucgearctrlstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Ruicheng_feedback, brakepedalstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Ruicheng_feedback, cruisestatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Ruicheng_feedback, ucgearposition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Ruicheng_feedback, uispeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::Ruicheng_feedback, uisteerangle_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::CS55_control, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::CS55_control, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::CS55_control, targetsteeringangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::CS55_control, targetspeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::CS55_control, targetledstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::CS55_control, lightswitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::CS55_control, speedgear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::CS55_control, timestamp_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::CS55_feedback, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::CS55_feedback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::CS55_feedback, embrakerstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::CS55_feedback, epsstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::CS55_feedback, torquestatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::CS55_feedback, decstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::CS55_feedback, sysstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::CS55_feedback, ucgearctrlstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::CS55_feedback, brakepedalstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::CS55_feedback, cruisestatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::CS55_feedback, ucgearposition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::CS55_feedback, uispeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Car_msg::CS55_feedback, uisteerangle_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::Car_msg::Common_control)},
  { 19, 33, sizeof(::Car_msg::Common_feedback)},
  { 42, 53, sizeof(::Car_msg::Ruicheng_control)},
  { 59, 75, sizeof(::Car_msg::Ruicheng_feedback)},
  { 86, 97, sizeof(::Car_msg::CS55_control)},
  { 103, 119, sizeof(::Car_msg::CS55_feedback)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Car_msg::_Common_control_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Car_msg::_Common_feedback_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Car_msg::_Ruicheng_control_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Car_msg::_Ruicheng_feedback_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Car_msg::_CS55_control_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Car_msg::_CS55_feedback_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Vehicle.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rVehicle.proto\022\007Car_msg\"\314\001\n\016Common_cont"
      "rol\022\021\n\tTimestamp\030\007 \002(\004\022\026\n\016VehicleVersion"
      "\030\006 \002(\t\022\033\n\023TargetSteeringAngle\030\001 \002(\005\022%\n\035T"
      "argetSteeringAngularVelocity\030\002 \001(\005\022\023\n\013Ta"
      "rgetSpeed\030\003 \002(\005\022\032\n\022TargetAcceleration\030\004 "
      "\002(\005\022\032\n\022TargetDeceleration\030\005 \002(\005\"\274\001\n\017Comm"
      "on_feedback\022\r\n\005Speed\030\001 \002(\r\022\r\n\005Steer\030\002 \002("
      "\005\022\r\n\005Error\030\003 \002(\005\022\014\n\004Mode\030\004 \002(\r\022\024\n\014SpeedL"
      "fWheel\030\005 \001(\r\022\024\n\014SpeedRfWheel\030\006 \001(\r\022\024\n\014Sp"
      "eedLBWheel\030\007 \001(\r\022\024\n\014SpeedRbWheel\030\010 \001(\r\022\026"
      "\n\016VehicleVersion\030\t \002(\t\"\247\001\n\020Ruicheng_cont"
      "rol\022\036\n\023TargetSteeringAngle\030\001 \002(\005:\0010\022\026\n\013T"
      "argetSpeed\030\002 \002(\r:\0010\022\032\n\017TargetLedStatus\030\003"
      " \001(\r:\0010\022\026\n\013LightSwitch\030\004 \001(\r:\0010\022\024\n\tSpeed"
      "Gear\030\005 \002(\r:\0010\022\021\n\tTimeStamp\030\006 \001(\r\"\203\002\n\021Rui"
      "cheng_feedback\022\026\n\016EmBrakerStatus\030\001 \002(\r\022\021"
      "\n\tEpsStatus\030\002 \002(\r\022\024\n\014TorqueStatus\030\003 \002(\r\022"
      "\021\n\tDecStatus\030\004 \002(\r\022\021\n\tSysStatus\030\005 \002(\r\022\030\n"
      "\020ucGearCtrlStatus\030\006 \002(\r\022\030\n\020BrakePedalSta"
      "tus\030\007 \002(\r\022\024\n\014CruiseStatus\030\010 \002(\r\022\026\n\016ucGea"
      "rPosition\030\t \002(\r\022\017\n\007uiSpeed\030\n \002(\r\022\024\n\014uiSt"
      "eerAngle\030\013 \002(\002\"\243\001\n\014CS55_control\022\036\n\023Targe"
      "tSteeringAngle\030\001 \002(\005:\0010\022\026\n\013TargetSpeed\030\002"
      " \002(\r:\0010\022\032\n\017TargetLedStatus\030\003 \001(\r:\0010\022\026\n\013L"
      "ightSwitch\030\004 \001(\r:\0010\022\024\n\tSpeedGear\030\005 \002(\r:\001"
      "0\022\021\n\tTimeStamp\030\006 \001(\r\"\377\001\n\rCS55_feedback\022\026"
      "\n\016EmBrakerStatus\030\001 \002(\r\022\021\n\tEpsStatus\030\002 \002("
      "\r\022\024\n\014TorqueStatus\030\003 \002(\r\022\021\n\tDecStatus\030\004 \002"
      "(\r\022\021\n\tSysStatus\030\005 \002(\r\022\030\n\020ucGearCtrlStatu"
      "s\030\006 \002(\r\022\030\n\020BrakePedalStatus\030\007 \002(\r\022\024\n\014Cru"
      "iseStatus\030\010 \002(\r\022\026\n\016ucGearPosition\030\t \002(\r\022"
      "\017\n\007uiSpeed\030\n \002(\r\022\024\n\014uiSteerAngle\030\013 \002(\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1278);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Vehicle.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Vehicle_2eproto
namespace Car_msg {

// ===================================================================

void Common_control::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Common_control::kTimestampFieldNumber;
const int Common_control::kVehicleVersionFieldNumber;
const int Common_control::kTargetSteeringAngleFieldNumber;
const int Common_control::kTargetSteeringAngularVelocityFieldNumber;
const int Common_control::kTargetSpeedFieldNumber;
const int Common_control::kTargetAccelerationFieldNumber;
const int Common_control::kTargetDecelerationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Common_control::Common_control()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Vehicle_2eproto::scc_info_Common_control.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Car_msg.Common_control)
}
Common_control::Common_control(const Common_control& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vehicleversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vehicleversion()) {
    vehicleversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicleversion_);
  }
  ::memcpy(&targetsteeringangle_, &from.targetsteeringangle_,
    static_cast<size_t>(reinterpret_cast<char*>(&targetdeceleration_) -
    reinterpret_cast<char*>(&targetsteeringangle_)) + sizeof(targetdeceleration_));
  // @@protoc_insertion_point(copy_constructor:Car_msg.Common_control)
}

void Common_control::SharedCtor() {
  vehicleversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&targetsteeringangle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&targetdeceleration_) -
      reinterpret_cast<char*>(&targetsteeringangle_)) + sizeof(targetdeceleration_));
}

Common_control::~Common_control() {
  // @@protoc_insertion_point(destructor:Car_msg.Common_control)
  SharedDtor();
}

void Common_control::SharedDtor() {
  vehicleversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Common_control::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Common_control::descriptor() {
  ::protobuf_Vehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Vehicle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Common_control& Common_control::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Vehicle_2eproto::scc_info_Common_control.base);
  return *internal_default_instance();
}


void Common_control::Clear() {
// @@protoc_insertion_point(message_clear_start:Car_msg.Common_control)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    vehicleversion_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 126u) {
    ::memset(&targetsteeringangle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&targetdeceleration_) -
        reinterpret_cast<char*>(&targetsteeringangle_)) + sizeof(targetdeceleration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Common_control::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Car_msg.Common_control)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 TargetSteeringAngle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_targetsteeringangle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetsteeringangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 TargetSteeringAngularVelocity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_targetsteeringangularvelocity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetsteeringangularvelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 TargetSpeed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_targetspeed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 TargetAcceleration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_targetacceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetacceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 TargetDeceleration = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_targetdeceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetdeceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string VehicleVersion = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vehicleversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vehicleversion().data(), static_cast<int>(this->vehicleversion().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Car_msg.Common_control.VehicleVersion");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 Timestamp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Car_msg.Common_control)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Car_msg.Common_control)
  return false;
#undef DO_
}

void Common_control::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Car_msg.Common_control)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 TargetSteeringAngle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->targetsteeringangle(), output);
  }

  // optional int32 TargetSteeringAngularVelocity = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->targetsteeringangularvelocity(), output);
  }

  // required int32 TargetSpeed = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->targetspeed(), output);
  }

  // required int32 TargetAcceleration = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->targetacceleration(), output);
  }

  // required int32 TargetDeceleration = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->targetdeceleration(), output);
  }

  // required string VehicleVersion = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vehicleversion().data(), static_cast<int>(this->vehicleversion().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Car_msg.Common_control.VehicleVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->vehicleversion(), output);
  }

  // required uint64 Timestamp = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Car_msg.Common_control)
}

::google::protobuf::uint8* Common_control::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Car_msg.Common_control)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 TargetSteeringAngle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->targetsteeringangle(), target);
  }

  // optional int32 TargetSteeringAngularVelocity = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->targetsteeringangularvelocity(), target);
  }

  // required int32 TargetSpeed = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->targetspeed(), target);
  }

  // required int32 TargetAcceleration = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->targetacceleration(), target);
  }

  // required int32 TargetDeceleration = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->targetdeceleration(), target);
  }

  // required string VehicleVersion = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vehicleversion().data(), static_cast<int>(this->vehicleversion().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Car_msg.Common_control.VehicleVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->vehicleversion(), target);
  }

  // required uint64 Timestamp = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Car_msg.Common_control)
  return target;
}

size_t Common_control::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Car_msg.Common_control)
  size_t total_size = 0;

  if (has_vehicleversion()) {
    // required string VehicleVersion = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vehicleversion());
  }

  if (has_targetsteeringangle()) {
    // required int32 TargetSteeringAngle = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->targetsteeringangle());
  }

  if (has_targetspeed()) {
    // required int32 TargetSpeed = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->targetspeed());
  }

  if (has_targetacceleration()) {
    // required int32 TargetAcceleration = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->targetacceleration());
  }

  if (has_timestamp()) {
    // required uint64 Timestamp = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  if (has_targetdeceleration()) {
    // required int32 TargetDeceleration = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->targetdeceleration());
  }

  return total_size;
}
size_t Common_control::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Car_msg.Common_control)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007b) ^ 0x0000007b) == 0) {  // All required fields are present.
    // required string VehicleVersion = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vehicleversion());

    // required int32 TargetSteeringAngle = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->targetsteeringangle());

    // required int32 TargetSpeed = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->targetspeed());

    // required int32 TargetAcceleration = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->targetacceleration());

    // required uint64 Timestamp = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());

    // required int32 TargetDeceleration = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->targetdeceleration());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 TargetSteeringAngularVelocity = 2;
  if (has_targetsteeringangularvelocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->targetsteeringangularvelocity());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Common_control::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Car_msg.Common_control)
  GOOGLE_DCHECK_NE(&from, this);
  const Common_control* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Common_control>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Car_msg.Common_control)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Car_msg.Common_control)
    MergeFrom(*source);
  }
}

void Common_control::MergeFrom(const Common_control& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Car_msg.Common_control)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_vehicleversion();
      vehicleversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicleversion_);
    }
    if (cached_has_bits & 0x00000002u) {
      targetsteeringangle_ = from.targetsteeringangle_;
    }
    if (cached_has_bits & 0x00000004u) {
      targetsteeringangularvelocity_ = from.targetsteeringangularvelocity_;
    }
    if (cached_has_bits & 0x00000008u) {
      targetspeed_ = from.targetspeed_;
    }
    if (cached_has_bits & 0x00000010u) {
      targetacceleration_ = from.targetacceleration_;
    }
    if (cached_has_bits & 0x00000020u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      targetdeceleration_ = from.targetdeceleration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Common_control::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Car_msg.Common_control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Common_control::CopyFrom(const Common_control& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Car_msg.Common_control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Common_control::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007b) != 0x0000007b) return false;
  return true;
}

void Common_control::Swap(Common_control* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Common_control::InternalSwap(Common_control* other) {
  using std::swap;
  vehicleversion_.Swap(&other->vehicleversion_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(targetsteeringangle_, other->targetsteeringangle_);
  swap(targetsteeringangularvelocity_, other->targetsteeringangularvelocity_);
  swap(targetspeed_, other->targetspeed_);
  swap(targetacceleration_, other->targetacceleration_);
  swap(timestamp_, other->timestamp_);
  swap(targetdeceleration_, other->targetdeceleration_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Common_control::GetMetadata() const {
  protobuf_Vehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Vehicle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Common_feedback::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Common_feedback::kSpeedFieldNumber;
const int Common_feedback::kSteerFieldNumber;
const int Common_feedback::kErrorFieldNumber;
const int Common_feedback::kModeFieldNumber;
const int Common_feedback::kSpeedLfWheelFieldNumber;
const int Common_feedback::kSpeedRfWheelFieldNumber;
const int Common_feedback::kSpeedLBWheelFieldNumber;
const int Common_feedback::kSpeedRbWheelFieldNumber;
const int Common_feedback::kVehicleVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Common_feedback::Common_feedback()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Vehicle_2eproto::scc_info_Common_feedback.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Car_msg.Common_feedback)
}
Common_feedback::Common_feedback(const Common_feedback& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vehicleversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vehicleversion()) {
    vehicleversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicleversion_);
  }
  ::memcpy(&speed_, &from.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&speedrbwheel_) -
    reinterpret_cast<char*>(&speed_)) + sizeof(speedrbwheel_));
  // @@protoc_insertion_point(copy_constructor:Car_msg.Common_feedback)
}

void Common_feedback::SharedCtor() {
  vehicleversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speedrbwheel_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(speedrbwheel_));
}

Common_feedback::~Common_feedback() {
  // @@protoc_insertion_point(destructor:Car_msg.Common_feedback)
  SharedDtor();
}

void Common_feedback::SharedDtor() {
  vehicleversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Common_feedback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Common_feedback::descriptor() {
  ::protobuf_Vehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Vehicle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Common_feedback& Common_feedback::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Vehicle_2eproto::scc_info_Common_feedback.base);
  return *internal_default_instance();
}


void Common_feedback::Clear() {
// @@protoc_insertion_point(message_clear_start:Car_msg.Common_feedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    vehicleversion_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 254u) {
    ::memset(&speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speedlbwheel_) -
        reinterpret_cast<char*>(&speed_)) + sizeof(speedlbwheel_));
  }
  speedrbwheel_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Common_feedback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Car_msg.Common_feedback)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Speed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Steer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_steer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &steer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Error = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Mode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SpeedLfWheel = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_speedlfwheel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speedlfwheel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SpeedRfWheel = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_speedrfwheel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speedrfwheel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SpeedLBWheel = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_speedlbwheel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speedlbwheel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SpeedRbWheel = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_speedrbwheel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speedrbwheel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string VehicleVersion = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vehicleversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vehicleversion().data(), static_cast<int>(this->vehicleversion().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Car_msg.Common_feedback.VehicleVersion");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Car_msg.Common_feedback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Car_msg.Common_feedback)
  return false;
#undef DO_
}

void Common_feedback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Car_msg.Common_feedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Speed = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->speed(), output);
  }

  // required int32 Steer = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->steer(), output);
  }

  // required int32 Error = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->error(), output);
  }

  // required uint32 Mode = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mode(), output);
  }

  // optional uint32 SpeedLfWheel = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->speedlfwheel(), output);
  }

  // optional uint32 SpeedRfWheel = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->speedrfwheel(), output);
  }

  // optional uint32 SpeedLBWheel = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->speedlbwheel(), output);
  }

  // optional uint32 SpeedRbWheel = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->speedrbwheel(), output);
  }

  // required string VehicleVersion = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vehicleversion().data(), static_cast<int>(this->vehicleversion().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Car_msg.Common_feedback.VehicleVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->vehicleversion(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Car_msg.Common_feedback)
}

::google::protobuf::uint8* Common_feedback::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Car_msg.Common_feedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Speed = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->speed(), target);
  }

  // required int32 Steer = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->steer(), target);
  }

  // required int32 Error = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->error(), target);
  }

  // required uint32 Mode = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mode(), target);
  }

  // optional uint32 SpeedLfWheel = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->speedlfwheel(), target);
  }

  // optional uint32 SpeedRfWheel = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->speedrfwheel(), target);
  }

  // optional uint32 SpeedLBWheel = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->speedlbwheel(), target);
  }

  // optional uint32 SpeedRbWheel = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->speedrbwheel(), target);
  }

  // required string VehicleVersion = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vehicleversion().data(), static_cast<int>(this->vehicleversion().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Car_msg.Common_feedback.VehicleVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->vehicleversion(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Car_msg.Common_feedback)
  return target;
}

size_t Common_feedback::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Car_msg.Common_feedback)
  size_t total_size = 0;

  if (has_vehicleversion()) {
    // required string VehicleVersion = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vehicleversion());
  }

  if (has_speed()) {
    // required uint32 Speed = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->speed());
  }

  if (has_steer()) {
    // required int32 Steer = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->steer());
  }

  if (has_error()) {
    // required int32 Error = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error());
  }

  if (has_mode()) {
    // required uint32 Mode = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mode());
  }

  return total_size;
}
size_t Common_feedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Car_msg.Common_feedback)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string VehicleVersion = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vehicleversion());

    // required uint32 Speed = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->speed());

    // required int32 Steer = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->steer());

    // required int32 Error = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error());

    // required uint32 Mode = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional uint32 SpeedLfWheel = 5;
    if (has_speedlfwheel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speedlfwheel());
    }

    // optional uint32 SpeedRfWheel = 6;
    if (has_speedrfwheel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speedrfwheel());
    }

    // optional uint32 SpeedLBWheel = 7;
    if (has_speedlbwheel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speedlbwheel());
    }

  }
  // optional uint32 SpeedRbWheel = 8;
  if (has_speedrbwheel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->speedrbwheel());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Common_feedback::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Car_msg.Common_feedback)
  GOOGLE_DCHECK_NE(&from, this);
  const Common_feedback* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Common_feedback>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Car_msg.Common_feedback)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Car_msg.Common_feedback)
    MergeFrom(*source);
  }
}

void Common_feedback::MergeFrom(const Common_feedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Car_msg.Common_feedback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_vehicleversion();
      vehicleversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicleversion_);
    }
    if (cached_has_bits & 0x00000002u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000004u) {
      steer_ = from.steer_;
    }
    if (cached_has_bits & 0x00000008u) {
      error_ = from.error_;
    }
    if (cached_has_bits & 0x00000010u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000020u) {
      speedlfwheel_ = from.speedlfwheel_;
    }
    if (cached_has_bits & 0x00000040u) {
      speedrfwheel_ = from.speedrfwheel_;
    }
    if (cached_has_bits & 0x00000080u) {
      speedlbwheel_ = from.speedlbwheel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_speedrbwheel(from.speedrbwheel());
  }
}

void Common_feedback::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Car_msg.Common_feedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Common_feedback::CopyFrom(const Common_feedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Car_msg.Common_feedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Common_feedback::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void Common_feedback::Swap(Common_feedback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Common_feedback::InternalSwap(Common_feedback* other) {
  using std::swap;
  vehicleversion_.Swap(&other->vehicleversion_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(speed_, other->speed_);
  swap(steer_, other->steer_);
  swap(error_, other->error_);
  swap(mode_, other->mode_);
  swap(speedlfwheel_, other->speedlfwheel_);
  swap(speedrfwheel_, other->speedrfwheel_);
  swap(speedlbwheel_, other->speedlbwheel_);
  swap(speedrbwheel_, other->speedrbwheel_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Common_feedback::GetMetadata() const {
  protobuf_Vehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Vehicle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ruicheng_control::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ruicheng_control::kTargetSteeringAngleFieldNumber;
const int Ruicheng_control::kTargetSpeedFieldNumber;
const int Ruicheng_control::kTargetLedStatusFieldNumber;
const int Ruicheng_control::kLightSwitchFieldNumber;
const int Ruicheng_control::kSpeedGearFieldNumber;
const int Ruicheng_control::kTimeStampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ruicheng_control::Ruicheng_control()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Vehicle_2eproto::scc_info_Ruicheng_control.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Car_msg.Ruicheng_control)
}
Ruicheng_control::Ruicheng_control(const Ruicheng_control& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&targetsteeringangle_, &from.targetsteeringangle_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&targetsteeringangle_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:Car_msg.Ruicheng_control)
}

void Ruicheng_control::SharedCtor() {
  ::memset(&targetsteeringangle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&targetsteeringangle_)) + sizeof(timestamp_));
}

Ruicheng_control::~Ruicheng_control() {
  // @@protoc_insertion_point(destructor:Car_msg.Ruicheng_control)
  SharedDtor();
}

void Ruicheng_control::SharedDtor() {
}

void Ruicheng_control::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Ruicheng_control::descriptor() {
  ::protobuf_Vehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Vehicle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ruicheng_control& Ruicheng_control::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Vehicle_2eproto::scc_info_Ruicheng_control.base);
  return *internal_default_instance();
}


void Ruicheng_control::Clear() {
// @@protoc_insertion_point(message_clear_start:Car_msg.Ruicheng_control)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&targetsteeringangle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&targetsteeringangle_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ruicheng_control::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Car_msg.Ruicheng_control)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 TargetSteeringAngle = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_targetsteeringangle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetsteeringangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 TargetSpeed = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_targetspeed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 TargetLedStatus = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_targetledstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetledstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 LightSwitch = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_lightswitch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lightswitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 SpeedGear = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_speedgear();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speedgear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 TimeStamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Car_msg.Ruicheng_control)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Car_msg.Ruicheng_control)
  return false;
#undef DO_
}

void Ruicheng_control::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Car_msg.Ruicheng_control)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 TargetSteeringAngle = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->targetsteeringangle(), output);
  }

  // required uint32 TargetSpeed = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->targetspeed(), output);
  }

  // optional uint32 TargetLedStatus = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->targetledstatus(), output);
  }

  // optional uint32 LightSwitch = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lightswitch(), output);
  }

  // required uint32 SpeedGear = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->speedgear(), output);
  }

  // optional uint32 TimeStamp = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Car_msg.Ruicheng_control)
}

::google::protobuf::uint8* Ruicheng_control::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Car_msg.Ruicheng_control)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 TargetSteeringAngle = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->targetsteeringangle(), target);
  }

  // required uint32 TargetSpeed = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->targetspeed(), target);
  }

  // optional uint32 TargetLedStatus = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->targetledstatus(), target);
  }

  // optional uint32 LightSwitch = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lightswitch(), target);
  }

  // required uint32 SpeedGear = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->speedgear(), target);
  }

  // optional uint32 TimeStamp = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Car_msg.Ruicheng_control)
  return target;
}

size_t Ruicheng_control::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Car_msg.Ruicheng_control)
  size_t total_size = 0;

  if (has_targetsteeringangle()) {
    // required int32 TargetSteeringAngle = 1 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->targetsteeringangle());
  }

  if (has_targetspeed()) {
    // required uint32 TargetSpeed = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->targetspeed());
  }

  if (has_speedgear()) {
    // required uint32 SpeedGear = 5 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->speedgear());
  }

  return total_size;
}
size_t Ruicheng_control::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Car_msg.Ruicheng_control)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000013) ^ 0x00000013) == 0) {  // All required fields are present.
    // required int32 TargetSteeringAngle = 1 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->targetsteeringangle());

    // required uint32 TargetSpeed = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->targetspeed());

    // required uint32 SpeedGear = 5 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->speedgear());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 12u) {
    // optional uint32 TargetLedStatus = 3 [default = 0];
    if (has_targetledstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetledstatus());
    }

    // optional uint32 LightSwitch = 4 [default = 0];
    if (has_lightswitch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lightswitch());
    }

  }
  // optional uint32 TimeStamp = 6;
  if (has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ruicheng_control::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Car_msg.Ruicheng_control)
  GOOGLE_DCHECK_NE(&from, this);
  const Ruicheng_control* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ruicheng_control>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Car_msg.Ruicheng_control)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Car_msg.Ruicheng_control)
    MergeFrom(*source);
  }
}

void Ruicheng_control::MergeFrom(const Ruicheng_control& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Car_msg.Ruicheng_control)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      targetsteeringangle_ = from.targetsteeringangle_;
    }
    if (cached_has_bits & 0x00000002u) {
      targetspeed_ = from.targetspeed_;
    }
    if (cached_has_bits & 0x00000004u) {
      targetledstatus_ = from.targetledstatus_;
    }
    if (cached_has_bits & 0x00000008u) {
      lightswitch_ = from.lightswitch_;
    }
    if (cached_has_bits & 0x00000010u) {
      speedgear_ = from.speedgear_;
    }
    if (cached_has_bits & 0x00000020u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ruicheng_control::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Car_msg.Ruicheng_control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ruicheng_control::CopyFrom(const Ruicheng_control& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Car_msg.Ruicheng_control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ruicheng_control::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;
  return true;
}

void Ruicheng_control::Swap(Ruicheng_control* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ruicheng_control::InternalSwap(Ruicheng_control* other) {
  using std::swap;
  swap(targetsteeringangle_, other->targetsteeringangle_);
  swap(targetspeed_, other->targetspeed_);
  swap(targetledstatus_, other->targetledstatus_);
  swap(lightswitch_, other->lightswitch_);
  swap(speedgear_, other->speedgear_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Ruicheng_control::GetMetadata() const {
  protobuf_Vehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Vehicle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ruicheng_feedback::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ruicheng_feedback::kEmBrakerStatusFieldNumber;
const int Ruicheng_feedback::kEpsStatusFieldNumber;
const int Ruicheng_feedback::kTorqueStatusFieldNumber;
const int Ruicheng_feedback::kDecStatusFieldNumber;
const int Ruicheng_feedback::kSysStatusFieldNumber;
const int Ruicheng_feedback::kUcGearCtrlStatusFieldNumber;
const int Ruicheng_feedback::kBrakePedalStatusFieldNumber;
const int Ruicheng_feedback::kCruiseStatusFieldNumber;
const int Ruicheng_feedback::kUcGearPositionFieldNumber;
const int Ruicheng_feedback::kUiSpeedFieldNumber;
const int Ruicheng_feedback::kUiSteerAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ruicheng_feedback::Ruicheng_feedback()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Vehicle_2eproto::scc_info_Ruicheng_feedback.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Car_msg.Ruicheng_feedback)
}
Ruicheng_feedback::Ruicheng_feedback(const Ruicheng_feedback& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&embrakerstatus_, &from.embrakerstatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&uisteerangle_) -
    reinterpret_cast<char*>(&embrakerstatus_)) + sizeof(uisteerangle_));
  // @@protoc_insertion_point(copy_constructor:Car_msg.Ruicheng_feedback)
}

void Ruicheng_feedback::SharedCtor() {
  ::memset(&embrakerstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uisteerangle_) -
      reinterpret_cast<char*>(&embrakerstatus_)) + sizeof(uisteerangle_));
}

Ruicheng_feedback::~Ruicheng_feedback() {
  // @@protoc_insertion_point(destructor:Car_msg.Ruicheng_feedback)
  SharedDtor();
}

void Ruicheng_feedback::SharedDtor() {
}

void Ruicheng_feedback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Ruicheng_feedback::descriptor() {
  ::protobuf_Vehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Vehicle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ruicheng_feedback& Ruicheng_feedback::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Vehicle_2eproto::scc_info_Ruicheng_feedback.base);
  return *internal_default_instance();
}


void Ruicheng_feedback::Clear() {
// @@protoc_insertion_point(message_clear_start:Car_msg.Ruicheng_feedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&embrakerstatus_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cruisestatus_) -
        reinterpret_cast<char*>(&embrakerstatus_)) + sizeof(cruisestatus_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&ucgearposition_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uisteerangle_) -
        reinterpret_cast<char*>(&ucgearposition_)) + sizeof(uisteerangle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ruicheng_feedback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Car_msg.Ruicheng_feedback)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 EmBrakerStatus = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_embrakerstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &embrakerstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 EpsStatus = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_epsstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &epsstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 TorqueStatus = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_torquestatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &torquestatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 DecStatus = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_decstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &decstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 SysStatus = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_sysstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sysstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ucGearCtrlStatus = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_ucgearctrlstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ucgearctrlstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 BrakePedalStatus = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_brakepedalstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &brakepedalstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 CruiseStatus = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_cruisestatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cruisestatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ucGearPosition = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_ucgearposition();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ucgearposition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 uiSpeed = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_uispeed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uispeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float uiSteerAngle = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_uisteerangle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &uisteerangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Car_msg.Ruicheng_feedback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Car_msg.Ruicheng_feedback)
  return false;
#undef DO_
}

void Ruicheng_feedback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Car_msg.Ruicheng_feedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 EmBrakerStatus = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->embrakerstatus(), output);
  }

  // required uint32 EpsStatus = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->epsstatus(), output);
  }

  // required uint32 TorqueStatus = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->torquestatus(), output);
  }

  // required uint32 DecStatus = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->decstatus(), output);
  }

  // required uint32 SysStatus = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sysstatus(), output);
  }

  // required uint32 ucGearCtrlStatus = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ucgearctrlstatus(), output);
  }

  // required uint32 BrakePedalStatus = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->brakepedalstatus(), output);
  }

  // required uint32 CruiseStatus = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->cruisestatus(), output);
  }

  // required uint32 ucGearPosition = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->ucgearposition(), output);
  }

  // required uint32 uiSpeed = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->uispeed(), output);
  }

  // required float uiSteerAngle = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->uisteerangle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Car_msg.Ruicheng_feedback)
}

::google::protobuf::uint8* Ruicheng_feedback::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Car_msg.Ruicheng_feedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 EmBrakerStatus = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->embrakerstatus(), target);
  }

  // required uint32 EpsStatus = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->epsstatus(), target);
  }

  // required uint32 TorqueStatus = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->torquestatus(), target);
  }

  // required uint32 DecStatus = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->decstatus(), target);
  }

  // required uint32 SysStatus = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sysstatus(), target);
  }

  // required uint32 ucGearCtrlStatus = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ucgearctrlstatus(), target);
  }

  // required uint32 BrakePedalStatus = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->brakepedalstatus(), target);
  }

  // required uint32 CruiseStatus = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->cruisestatus(), target);
  }

  // required uint32 ucGearPosition = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->ucgearposition(), target);
  }

  // required uint32 uiSpeed = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->uispeed(), target);
  }

  // required float uiSteerAngle = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->uisteerangle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Car_msg.Ruicheng_feedback)
  return target;
}

size_t Ruicheng_feedback::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Car_msg.Ruicheng_feedback)
  size_t total_size = 0;

  if (has_embrakerstatus()) {
    // required uint32 EmBrakerStatus = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->embrakerstatus());
  }

  if (has_epsstatus()) {
    // required uint32 EpsStatus = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->epsstatus());
  }

  if (has_torquestatus()) {
    // required uint32 TorqueStatus = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->torquestatus());
  }

  if (has_decstatus()) {
    // required uint32 DecStatus = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->decstatus());
  }

  if (has_sysstatus()) {
    // required uint32 SysStatus = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sysstatus());
  }

  if (has_ucgearctrlstatus()) {
    // required uint32 ucGearCtrlStatus = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ucgearctrlstatus());
  }

  if (has_brakepedalstatus()) {
    // required uint32 BrakePedalStatus = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->brakepedalstatus());
  }

  if (has_cruisestatus()) {
    // required uint32 CruiseStatus = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cruisestatus());
  }

  if (has_ucgearposition()) {
    // required uint32 ucGearPosition = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ucgearposition());
  }

  if (has_uispeed()) {
    // required uint32 uiSpeed = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uispeed());
  }

  if (has_uisteerangle()) {
    // required float uiSteerAngle = 11;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Ruicheng_feedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Car_msg.Ruicheng_feedback)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000007ff) ^ 0x000007ff) == 0) {  // All required fields are present.
    // required uint32 EmBrakerStatus = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->embrakerstatus());

    // required uint32 EpsStatus = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->epsstatus());

    // required uint32 TorqueStatus = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->torquestatus());

    // required uint32 DecStatus = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->decstatus());

    // required uint32 SysStatus = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sysstatus());

    // required uint32 ucGearCtrlStatus = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ucgearctrlstatus());

    // required uint32 BrakePedalStatus = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->brakepedalstatus());

    // required uint32 CruiseStatus = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cruisestatus());

    // required uint32 ucGearPosition = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ucgearposition());

    // required uint32 uiSpeed = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uispeed());

    // required float uiSteerAngle = 11;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ruicheng_feedback::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Car_msg.Ruicheng_feedback)
  GOOGLE_DCHECK_NE(&from, this);
  const Ruicheng_feedback* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ruicheng_feedback>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Car_msg.Ruicheng_feedback)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Car_msg.Ruicheng_feedback)
    MergeFrom(*source);
  }
}

void Ruicheng_feedback::MergeFrom(const Ruicheng_feedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Car_msg.Ruicheng_feedback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      embrakerstatus_ = from.embrakerstatus_;
    }
    if (cached_has_bits & 0x00000002u) {
      epsstatus_ = from.epsstatus_;
    }
    if (cached_has_bits & 0x00000004u) {
      torquestatus_ = from.torquestatus_;
    }
    if (cached_has_bits & 0x00000008u) {
      decstatus_ = from.decstatus_;
    }
    if (cached_has_bits & 0x00000010u) {
      sysstatus_ = from.sysstatus_;
    }
    if (cached_has_bits & 0x00000020u) {
      ucgearctrlstatus_ = from.ucgearctrlstatus_;
    }
    if (cached_has_bits & 0x00000040u) {
      brakepedalstatus_ = from.brakepedalstatus_;
    }
    if (cached_has_bits & 0x00000080u) {
      cruisestatus_ = from.cruisestatus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      ucgearposition_ = from.ucgearposition_;
    }
    if (cached_has_bits & 0x00000200u) {
      uispeed_ = from.uispeed_;
    }
    if (cached_has_bits & 0x00000400u) {
      uisteerangle_ = from.uisteerangle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ruicheng_feedback::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Car_msg.Ruicheng_feedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ruicheng_feedback::CopyFrom(const Ruicheng_feedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Car_msg.Ruicheng_feedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ruicheng_feedback::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  return true;
}

void Ruicheng_feedback::Swap(Ruicheng_feedback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ruicheng_feedback::InternalSwap(Ruicheng_feedback* other) {
  using std::swap;
  swap(embrakerstatus_, other->embrakerstatus_);
  swap(epsstatus_, other->epsstatus_);
  swap(torquestatus_, other->torquestatus_);
  swap(decstatus_, other->decstatus_);
  swap(sysstatus_, other->sysstatus_);
  swap(ucgearctrlstatus_, other->ucgearctrlstatus_);
  swap(brakepedalstatus_, other->brakepedalstatus_);
  swap(cruisestatus_, other->cruisestatus_);
  swap(ucgearposition_, other->ucgearposition_);
  swap(uispeed_, other->uispeed_);
  swap(uisteerangle_, other->uisteerangle_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Ruicheng_feedback::GetMetadata() const {
  protobuf_Vehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Vehicle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CS55_control::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS55_control::kTargetSteeringAngleFieldNumber;
const int CS55_control::kTargetSpeedFieldNumber;
const int CS55_control::kTargetLedStatusFieldNumber;
const int CS55_control::kLightSwitchFieldNumber;
const int CS55_control::kSpeedGearFieldNumber;
const int CS55_control::kTimeStampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS55_control::CS55_control()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Vehicle_2eproto::scc_info_CS55_control.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Car_msg.CS55_control)
}
CS55_control::CS55_control(const CS55_control& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&targetsteeringangle_, &from.targetsteeringangle_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&targetsteeringangle_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:Car_msg.CS55_control)
}

void CS55_control::SharedCtor() {
  ::memset(&targetsteeringangle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&targetsteeringangle_)) + sizeof(timestamp_));
}

CS55_control::~CS55_control() {
  // @@protoc_insertion_point(destructor:Car_msg.CS55_control)
  SharedDtor();
}

void CS55_control::SharedDtor() {
}

void CS55_control::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CS55_control::descriptor() {
  ::protobuf_Vehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Vehicle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS55_control& CS55_control::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Vehicle_2eproto::scc_info_CS55_control.base);
  return *internal_default_instance();
}


void CS55_control::Clear() {
// @@protoc_insertion_point(message_clear_start:Car_msg.CS55_control)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&targetsteeringangle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&targetsteeringangle_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS55_control::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Car_msg.CS55_control)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 TargetSteeringAngle = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_targetsteeringangle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetsteeringangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 TargetSpeed = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_targetspeed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 TargetLedStatus = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_targetledstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetledstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 LightSwitch = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_lightswitch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lightswitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 SpeedGear = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_speedgear();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speedgear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 TimeStamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Car_msg.CS55_control)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Car_msg.CS55_control)
  return false;
#undef DO_
}

void CS55_control::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Car_msg.CS55_control)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 TargetSteeringAngle = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->targetsteeringangle(), output);
  }

  // required uint32 TargetSpeed = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->targetspeed(), output);
  }

  // optional uint32 TargetLedStatus = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->targetledstatus(), output);
  }

  // optional uint32 LightSwitch = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lightswitch(), output);
  }

  // required uint32 SpeedGear = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->speedgear(), output);
  }

  // optional uint32 TimeStamp = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Car_msg.CS55_control)
}

::google::protobuf::uint8* CS55_control::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Car_msg.CS55_control)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 TargetSteeringAngle = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->targetsteeringangle(), target);
  }

  // required uint32 TargetSpeed = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->targetspeed(), target);
  }

  // optional uint32 TargetLedStatus = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->targetledstatus(), target);
  }

  // optional uint32 LightSwitch = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lightswitch(), target);
  }

  // required uint32 SpeedGear = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->speedgear(), target);
  }

  // optional uint32 TimeStamp = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Car_msg.CS55_control)
  return target;
}

size_t CS55_control::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Car_msg.CS55_control)
  size_t total_size = 0;

  if (has_targetsteeringangle()) {
    // required int32 TargetSteeringAngle = 1 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->targetsteeringangle());
  }

  if (has_targetspeed()) {
    // required uint32 TargetSpeed = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->targetspeed());
  }

  if (has_speedgear()) {
    // required uint32 SpeedGear = 5 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->speedgear());
  }

  return total_size;
}
size_t CS55_control::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Car_msg.CS55_control)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000013) ^ 0x00000013) == 0) {  // All required fields are present.
    // required int32 TargetSteeringAngle = 1 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->targetsteeringangle());

    // required uint32 TargetSpeed = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->targetspeed());

    // required uint32 SpeedGear = 5 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->speedgear());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 12u) {
    // optional uint32 TargetLedStatus = 3 [default = 0];
    if (has_targetledstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetledstatus());
    }

    // optional uint32 LightSwitch = 4 [default = 0];
    if (has_lightswitch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lightswitch());
    }

  }
  // optional uint32 TimeStamp = 6;
  if (has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS55_control::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Car_msg.CS55_control)
  GOOGLE_DCHECK_NE(&from, this);
  const CS55_control* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS55_control>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Car_msg.CS55_control)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Car_msg.CS55_control)
    MergeFrom(*source);
  }
}

void CS55_control::MergeFrom(const CS55_control& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Car_msg.CS55_control)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      targetsteeringangle_ = from.targetsteeringangle_;
    }
    if (cached_has_bits & 0x00000002u) {
      targetspeed_ = from.targetspeed_;
    }
    if (cached_has_bits & 0x00000004u) {
      targetledstatus_ = from.targetledstatus_;
    }
    if (cached_has_bits & 0x00000008u) {
      lightswitch_ = from.lightswitch_;
    }
    if (cached_has_bits & 0x00000010u) {
      speedgear_ = from.speedgear_;
    }
    if (cached_has_bits & 0x00000020u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CS55_control::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Car_msg.CS55_control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS55_control::CopyFrom(const CS55_control& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Car_msg.CS55_control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS55_control::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;
  return true;
}

void CS55_control::Swap(CS55_control* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS55_control::InternalSwap(CS55_control* other) {
  using std::swap;
  swap(targetsteeringangle_, other->targetsteeringangle_);
  swap(targetspeed_, other->targetspeed_);
  swap(targetledstatus_, other->targetledstatus_);
  swap(lightswitch_, other->lightswitch_);
  swap(speedgear_, other->speedgear_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CS55_control::GetMetadata() const {
  protobuf_Vehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Vehicle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CS55_feedback::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CS55_feedback::kEmBrakerStatusFieldNumber;
const int CS55_feedback::kEpsStatusFieldNumber;
const int CS55_feedback::kTorqueStatusFieldNumber;
const int CS55_feedback::kDecStatusFieldNumber;
const int CS55_feedback::kSysStatusFieldNumber;
const int CS55_feedback::kUcGearCtrlStatusFieldNumber;
const int CS55_feedback::kBrakePedalStatusFieldNumber;
const int CS55_feedback::kCruiseStatusFieldNumber;
const int CS55_feedback::kUcGearPositionFieldNumber;
const int CS55_feedback::kUiSpeedFieldNumber;
const int CS55_feedback::kUiSteerAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS55_feedback::CS55_feedback()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Vehicle_2eproto::scc_info_CS55_feedback.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Car_msg.CS55_feedback)
}
CS55_feedback::CS55_feedback(const CS55_feedback& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&embrakerstatus_, &from.embrakerstatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&uisteerangle_) -
    reinterpret_cast<char*>(&embrakerstatus_)) + sizeof(uisteerangle_));
  // @@protoc_insertion_point(copy_constructor:Car_msg.CS55_feedback)
}

void CS55_feedback::SharedCtor() {
  ::memset(&embrakerstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uisteerangle_) -
      reinterpret_cast<char*>(&embrakerstatus_)) + sizeof(uisteerangle_));
}

CS55_feedback::~CS55_feedback() {
  // @@protoc_insertion_point(destructor:Car_msg.CS55_feedback)
  SharedDtor();
}

void CS55_feedback::SharedDtor() {
}

void CS55_feedback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CS55_feedback::descriptor() {
  ::protobuf_Vehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Vehicle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CS55_feedback& CS55_feedback::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Vehicle_2eproto::scc_info_CS55_feedback.base);
  return *internal_default_instance();
}


void CS55_feedback::Clear() {
// @@protoc_insertion_point(message_clear_start:Car_msg.CS55_feedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&embrakerstatus_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cruisestatus_) -
        reinterpret_cast<char*>(&embrakerstatus_)) + sizeof(cruisestatus_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&ucgearposition_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uisteerangle_) -
        reinterpret_cast<char*>(&ucgearposition_)) + sizeof(uisteerangle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CS55_feedback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Car_msg.CS55_feedback)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 EmBrakerStatus = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_embrakerstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &embrakerstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 EpsStatus = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_epsstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &epsstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 TorqueStatus = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_torquestatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &torquestatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 DecStatus = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_decstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &decstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 SysStatus = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_sysstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sysstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ucGearCtrlStatus = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_ucgearctrlstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ucgearctrlstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 BrakePedalStatus = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_brakepedalstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &brakepedalstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 CruiseStatus = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_cruisestatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cruisestatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ucGearPosition = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_ucgearposition();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ucgearposition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 uiSpeed = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_uispeed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uispeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float uiSteerAngle = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_uisteerangle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &uisteerangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Car_msg.CS55_feedback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Car_msg.CS55_feedback)
  return false;
#undef DO_
}

void CS55_feedback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Car_msg.CS55_feedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 EmBrakerStatus = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->embrakerstatus(), output);
  }

  // required uint32 EpsStatus = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->epsstatus(), output);
  }

  // required uint32 TorqueStatus = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->torquestatus(), output);
  }

  // required uint32 DecStatus = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->decstatus(), output);
  }

  // required uint32 SysStatus = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sysstatus(), output);
  }

  // required uint32 ucGearCtrlStatus = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ucgearctrlstatus(), output);
  }

  // required uint32 BrakePedalStatus = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->brakepedalstatus(), output);
  }

  // required uint32 CruiseStatus = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->cruisestatus(), output);
  }

  // required uint32 ucGearPosition = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->ucgearposition(), output);
  }

  // required uint32 uiSpeed = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->uispeed(), output);
  }

  // required float uiSteerAngle = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->uisteerangle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Car_msg.CS55_feedback)
}

::google::protobuf::uint8* CS55_feedback::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Car_msg.CS55_feedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 EmBrakerStatus = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->embrakerstatus(), target);
  }

  // required uint32 EpsStatus = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->epsstatus(), target);
  }

  // required uint32 TorqueStatus = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->torquestatus(), target);
  }

  // required uint32 DecStatus = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->decstatus(), target);
  }

  // required uint32 SysStatus = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sysstatus(), target);
  }

  // required uint32 ucGearCtrlStatus = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ucgearctrlstatus(), target);
  }

  // required uint32 BrakePedalStatus = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->brakepedalstatus(), target);
  }

  // required uint32 CruiseStatus = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->cruisestatus(), target);
  }

  // required uint32 ucGearPosition = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->ucgearposition(), target);
  }

  // required uint32 uiSpeed = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->uispeed(), target);
  }

  // required float uiSteerAngle = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->uisteerangle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Car_msg.CS55_feedback)
  return target;
}

size_t CS55_feedback::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Car_msg.CS55_feedback)
  size_t total_size = 0;

  if (has_embrakerstatus()) {
    // required uint32 EmBrakerStatus = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->embrakerstatus());
  }

  if (has_epsstatus()) {
    // required uint32 EpsStatus = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->epsstatus());
  }

  if (has_torquestatus()) {
    // required uint32 TorqueStatus = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->torquestatus());
  }

  if (has_decstatus()) {
    // required uint32 DecStatus = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->decstatus());
  }

  if (has_sysstatus()) {
    // required uint32 SysStatus = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sysstatus());
  }

  if (has_ucgearctrlstatus()) {
    // required uint32 ucGearCtrlStatus = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ucgearctrlstatus());
  }

  if (has_brakepedalstatus()) {
    // required uint32 BrakePedalStatus = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->brakepedalstatus());
  }

  if (has_cruisestatus()) {
    // required uint32 CruiseStatus = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cruisestatus());
  }

  if (has_ucgearposition()) {
    // required uint32 ucGearPosition = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ucgearposition());
  }

  if (has_uispeed()) {
    // required uint32 uiSpeed = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uispeed());
  }

  if (has_uisteerangle()) {
    // required float uiSteerAngle = 11;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t CS55_feedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Car_msg.CS55_feedback)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000007ff) ^ 0x000007ff) == 0) {  // All required fields are present.
    // required uint32 EmBrakerStatus = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->embrakerstatus());

    // required uint32 EpsStatus = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->epsstatus());

    // required uint32 TorqueStatus = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->torquestatus());

    // required uint32 DecStatus = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->decstatus());

    // required uint32 SysStatus = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sysstatus());

    // required uint32 ucGearCtrlStatus = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ucgearctrlstatus());

    // required uint32 BrakePedalStatus = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->brakepedalstatus());

    // required uint32 CruiseStatus = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cruisestatus());

    // required uint32 ucGearPosition = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ucgearposition());

    // required uint32 uiSpeed = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uispeed());

    // required float uiSteerAngle = 11;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CS55_feedback::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Car_msg.CS55_feedback)
  GOOGLE_DCHECK_NE(&from, this);
  const CS55_feedback* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CS55_feedback>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Car_msg.CS55_feedback)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Car_msg.CS55_feedback)
    MergeFrom(*source);
  }
}

void CS55_feedback::MergeFrom(const CS55_feedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Car_msg.CS55_feedback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      embrakerstatus_ = from.embrakerstatus_;
    }
    if (cached_has_bits & 0x00000002u) {
      epsstatus_ = from.epsstatus_;
    }
    if (cached_has_bits & 0x00000004u) {
      torquestatus_ = from.torquestatus_;
    }
    if (cached_has_bits & 0x00000008u) {
      decstatus_ = from.decstatus_;
    }
    if (cached_has_bits & 0x00000010u) {
      sysstatus_ = from.sysstatus_;
    }
    if (cached_has_bits & 0x00000020u) {
      ucgearctrlstatus_ = from.ucgearctrlstatus_;
    }
    if (cached_has_bits & 0x00000040u) {
      brakepedalstatus_ = from.brakepedalstatus_;
    }
    if (cached_has_bits & 0x00000080u) {
      cruisestatus_ = from.cruisestatus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      ucgearposition_ = from.ucgearposition_;
    }
    if (cached_has_bits & 0x00000200u) {
      uispeed_ = from.uispeed_;
    }
    if (cached_has_bits & 0x00000400u) {
      uisteerangle_ = from.uisteerangle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CS55_feedback::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Car_msg.CS55_feedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS55_feedback::CopyFrom(const CS55_feedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Car_msg.CS55_feedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS55_feedback::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  return true;
}

void CS55_feedback::Swap(CS55_feedback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS55_feedback::InternalSwap(CS55_feedback* other) {
  using std::swap;
  swap(embrakerstatus_, other->embrakerstatus_);
  swap(epsstatus_, other->epsstatus_);
  swap(torquestatus_, other->torquestatus_);
  swap(decstatus_, other->decstatus_);
  swap(sysstatus_, other->sysstatus_);
  swap(ucgearctrlstatus_, other->ucgearctrlstatus_);
  swap(brakepedalstatus_, other->brakepedalstatus_);
  swap(cruisestatus_, other->cruisestatus_);
  swap(ucgearposition_, other->ucgearposition_);
  swap(uispeed_, other->uispeed_);
  swap(uisteerangle_, other->uisteerangle_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CS55_feedback::GetMetadata() const {
  protobuf_Vehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Vehicle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Car_msg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Car_msg::Common_control* Arena::CreateMaybeMessage< ::Car_msg::Common_control >(Arena* arena) {
  return Arena::CreateInternal< ::Car_msg::Common_control >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Car_msg::Common_feedback* Arena::CreateMaybeMessage< ::Car_msg::Common_feedback >(Arena* arena) {
  return Arena::CreateInternal< ::Car_msg::Common_feedback >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Car_msg::Ruicheng_control* Arena::CreateMaybeMessage< ::Car_msg::Ruicheng_control >(Arena* arena) {
  return Arena::CreateInternal< ::Car_msg::Ruicheng_control >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Car_msg::Ruicheng_feedback* Arena::CreateMaybeMessage< ::Car_msg::Ruicheng_feedback >(Arena* arena) {
  return Arena::CreateInternal< ::Car_msg::Ruicheng_feedback >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Car_msg::CS55_control* Arena::CreateMaybeMessage< ::Car_msg::CS55_control >(Arena* arena) {
  return Arena::CreateInternal< ::Car_msg::CS55_control >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Car_msg::CS55_feedback* Arena::CreateMaybeMessage< ::Car_msg::CS55_feedback >(Arena* arena) {
  return Arena::CreateInternal< ::Car_msg::CS55_feedback >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
