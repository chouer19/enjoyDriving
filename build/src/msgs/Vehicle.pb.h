// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Vehicle.proto

#ifndef PROTOBUF_INCLUDED_Vehicle_2eproto
#define PROTOBUF_INCLUDED_Vehicle_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Vehicle_2eproto 

namespace protobuf_Vehicle_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Vehicle_2eproto
namespace Car_msg {
class CS55_control;
class CS55_controlDefaultTypeInternal;
extern CS55_controlDefaultTypeInternal _CS55_control_default_instance_;
class CS55_feedback;
class CS55_feedbackDefaultTypeInternal;
extern CS55_feedbackDefaultTypeInternal _CS55_feedback_default_instance_;
class Common_control;
class Common_controlDefaultTypeInternal;
extern Common_controlDefaultTypeInternal _Common_control_default_instance_;
class Common_feedback;
class Common_feedbackDefaultTypeInternal;
extern Common_feedbackDefaultTypeInternal _Common_feedback_default_instance_;
class Ruicheng_control;
class Ruicheng_controlDefaultTypeInternal;
extern Ruicheng_controlDefaultTypeInternal _Ruicheng_control_default_instance_;
class Ruicheng_feedback;
class Ruicheng_feedbackDefaultTypeInternal;
extern Ruicheng_feedbackDefaultTypeInternal _Ruicheng_feedback_default_instance_;
}  // namespace Car_msg
namespace google {
namespace protobuf {
template<> ::Car_msg::CS55_control* Arena::CreateMaybeMessage<::Car_msg::CS55_control>(Arena*);
template<> ::Car_msg::CS55_feedback* Arena::CreateMaybeMessage<::Car_msg::CS55_feedback>(Arena*);
template<> ::Car_msg::Common_control* Arena::CreateMaybeMessage<::Car_msg::Common_control>(Arena*);
template<> ::Car_msg::Common_feedback* Arena::CreateMaybeMessage<::Car_msg::Common_feedback>(Arena*);
template<> ::Car_msg::Ruicheng_control* Arena::CreateMaybeMessage<::Car_msg::Ruicheng_control>(Arena*);
template<> ::Car_msg::Ruicheng_feedback* Arena::CreateMaybeMessage<::Car_msg::Ruicheng_feedback>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Car_msg {

// ===================================================================

class Common_control : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Car_msg.Common_control) */ {
 public:
  Common_control();
  virtual ~Common_control();

  Common_control(const Common_control& from);

  inline Common_control& operator=(const Common_control& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Common_control(Common_control&& from) noexcept
    : Common_control() {
    *this = ::std::move(from);
  }

  inline Common_control& operator=(Common_control&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Common_control& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Common_control* internal_default_instance() {
    return reinterpret_cast<const Common_control*>(
               &_Common_control_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Common_control* other);
  friend void swap(Common_control& a, Common_control& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Common_control* New() const final {
    return CreateMaybeMessage<Common_control>(NULL);
  }

  Common_control* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Common_control>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Common_control& from);
  void MergeFrom(const Common_control& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Common_control* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string VehicleVersion = 6;
  bool has_vehicleversion() const;
  void clear_vehicleversion();
  static const int kVehicleVersionFieldNumber = 6;
  const ::std::string& vehicleversion() const;
  void set_vehicleversion(const ::std::string& value);
  #if LANG_CXX11
  void set_vehicleversion(::std::string&& value);
  #endif
  void set_vehicleversion(const char* value);
  void set_vehicleversion(const char* value, size_t size);
  ::std::string* mutable_vehicleversion();
  ::std::string* release_vehicleversion();
  void set_allocated_vehicleversion(::std::string* vehicleversion);

  // required int32 TargetSteeringAngle = 1;
  bool has_targetsteeringangle() const;
  void clear_targetsteeringangle();
  static const int kTargetSteeringAngleFieldNumber = 1;
  ::google::protobuf::int32 targetsteeringangle() const;
  void set_targetsteeringangle(::google::protobuf::int32 value);

  // optional int32 TargetSteeringAngularVelocity = 2;
  bool has_targetsteeringangularvelocity() const;
  void clear_targetsteeringangularvelocity();
  static const int kTargetSteeringAngularVelocityFieldNumber = 2;
  ::google::protobuf::int32 targetsteeringangularvelocity() const;
  void set_targetsteeringangularvelocity(::google::protobuf::int32 value);

  // required int32 TargetSpeed = 3;
  bool has_targetspeed() const;
  void clear_targetspeed();
  static const int kTargetSpeedFieldNumber = 3;
  ::google::protobuf::int32 targetspeed() const;
  void set_targetspeed(::google::protobuf::int32 value);

  // required int32 TargetAcceleration = 4;
  bool has_targetacceleration() const;
  void clear_targetacceleration();
  static const int kTargetAccelerationFieldNumber = 4;
  ::google::protobuf::int32 targetacceleration() const;
  void set_targetacceleration(::google::protobuf::int32 value);

  // required int32 TargetDeceleration = 5;
  bool has_targetdeceleration() const;
  void clear_targetdeceleration();
  static const int kTargetDecelerationFieldNumber = 5;
  ::google::protobuf::int32 targetdeceleration() const;
  void set_targetdeceleration(::google::protobuf::int32 value);

  // required int32 SteeringMode = 8;
  bool has_steeringmode() const;
  void clear_steeringmode();
  static const int kSteeringModeFieldNumber = 8;
  ::google::protobuf::int32 steeringmode() const;
  void set_steeringmode(::google::protobuf::int32 value);

  // required uint64 Timestamp = 7;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 7;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // required int32 AccMode = 9;
  bool has_accmode() const;
  void clear_accmode();
  static const int kAccModeFieldNumber = 9;
  ::google::protobuf::int32 accmode() const;
  void set_accmode(::google::protobuf::int32 value);

  // required int32 DecMode = 10;
  bool has_decmode() const;
  void clear_decmode();
  static const int kDecModeFieldNumber = 10;
  ::google::protobuf::int32 decmode() const;
  void set_decmode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Car_msg.Common_control)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_vehicleversion();
  void clear_has_vehicleversion();
  void set_has_targetsteeringangle();
  void clear_has_targetsteeringangle();
  void set_has_targetsteeringangularvelocity();
  void clear_has_targetsteeringangularvelocity();
  void set_has_steeringmode();
  void clear_has_steeringmode();
  void set_has_targetspeed();
  void clear_has_targetspeed();
  void set_has_targetacceleration();
  void clear_has_targetacceleration();
  void set_has_accmode();
  void clear_has_accmode();
  void set_has_targetdeceleration();
  void clear_has_targetdeceleration();
  void set_has_decmode();
  void clear_has_decmode();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr vehicleversion_;
  ::google::protobuf::int32 targetsteeringangle_;
  ::google::protobuf::int32 targetsteeringangularvelocity_;
  ::google::protobuf::int32 targetspeed_;
  ::google::protobuf::int32 targetacceleration_;
  ::google::protobuf::int32 targetdeceleration_;
  ::google::protobuf::int32 steeringmode_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::int32 accmode_;
  ::google::protobuf::int32 decmode_;
  friend struct ::protobuf_Vehicle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Common_feedback : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Car_msg.Common_feedback) */ {
 public:
  Common_feedback();
  virtual ~Common_feedback();

  Common_feedback(const Common_feedback& from);

  inline Common_feedback& operator=(const Common_feedback& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Common_feedback(Common_feedback&& from) noexcept
    : Common_feedback() {
    *this = ::std::move(from);
  }

  inline Common_feedback& operator=(Common_feedback&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Common_feedback& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Common_feedback* internal_default_instance() {
    return reinterpret_cast<const Common_feedback*>(
               &_Common_feedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Common_feedback* other);
  friend void swap(Common_feedback& a, Common_feedback& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Common_feedback* New() const final {
    return CreateMaybeMessage<Common_feedback>(NULL);
  }

  Common_feedback* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Common_feedback>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Common_feedback& from);
  void MergeFrom(const Common_feedback& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Common_feedback* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string VehicleVersion = 9;
  bool has_vehicleversion() const;
  void clear_vehicleversion();
  static const int kVehicleVersionFieldNumber = 9;
  const ::std::string& vehicleversion() const;
  void set_vehicleversion(const ::std::string& value);
  #if LANG_CXX11
  void set_vehicleversion(::std::string&& value);
  #endif
  void set_vehicleversion(const char* value);
  void set_vehicleversion(const char* value, size_t size);
  ::std::string* mutable_vehicleversion();
  ::std::string* release_vehicleversion();
  void set_allocated_vehicleversion(::std::string* vehicleversion);

  // required uint32 Speed = 1;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 1;
  ::google::protobuf::uint32 speed() const;
  void set_speed(::google::protobuf::uint32 value);

  // required int32 Steer = 2;
  bool has_steer() const;
  void clear_steer();
  static const int kSteerFieldNumber = 2;
  ::google::protobuf::int32 steer() const;
  void set_steer(::google::protobuf::int32 value);

  // required int32 Error = 3;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 3;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // required uint32 Mode = 4;
  bool has_mode() const;
  void clear_mode();
  static const int kModeFieldNumber = 4;
  ::google::protobuf::uint32 mode() const;
  void set_mode(::google::protobuf::uint32 value);

  // optional uint32 SpeedLfWheel = 5;
  bool has_speedlfwheel() const;
  void clear_speedlfwheel();
  static const int kSpeedLfWheelFieldNumber = 5;
  ::google::protobuf::uint32 speedlfwheel() const;
  void set_speedlfwheel(::google::protobuf::uint32 value);

  // optional uint32 SpeedRfWheel = 6;
  bool has_speedrfwheel() const;
  void clear_speedrfwheel();
  static const int kSpeedRfWheelFieldNumber = 6;
  ::google::protobuf::uint32 speedrfwheel() const;
  void set_speedrfwheel(::google::protobuf::uint32 value);

  // optional uint32 SpeedLBWheel = 7;
  bool has_speedlbwheel() const;
  void clear_speedlbwheel();
  static const int kSpeedLBWheelFieldNumber = 7;
  ::google::protobuf::uint32 speedlbwheel() const;
  void set_speedlbwheel(::google::protobuf::uint32 value);

  // optional uint32 SpeedRbWheel = 8;
  bool has_speedrbwheel() const;
  void clear_speedrbwheel();
  static const int kSpeedRbWheelFieldNumber = 8;
  ::google::protobuf::uint32 speedrbwheel() const;
  void set_speedrbwheel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Car_msg.Common_feedback)
 private:
  void set_has_speed();
  void clear_has_speed();
  void set_has_steer();
  void clear_has_steer();
  void set_has_error();
  void clear_has_error();
  void set_has_mode();
  void clear_has_mode();
  void set_has_speedlfwheel();
  void clear_has_speedlfwheel();
  void set_has_speedrfwheel();
  void clear_has_speedrfwheel();
  void set_has_speedlbwheel();
  void clear_has_speedlbwheel();
  void set_has_speedrbwheel();
  void clear_has_speedrbwheel();
  void set_has_vehicleversion();
  void clear_has_vehicleversion();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr vehicleversion_;
  ::google::protobuf::uint32 speed_;
  ::google::protobuf::int32 steer_;
  ::google::protobuf::int32 error_;
  ::google::protobuf::uint32 mode_;
  ::google::protobuf::uint32 speedlfwheel_;
  ::google::protobuf::uint32 speedrfwheel_;
  ::google::protobuf::uint32 speedlbwheel_;
  ::google::protobuf::uint32 speedrbwheel_;
  friend struct ::protobuf_Vehicle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ruicheng_control : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Car_msg.Ruicheng_control) */ {
 public:
  Ruicheng_control();
  virtual ~Ruicheng_control();

  Ruicheng_control(const Ruicheng_control& from);

  inline Ruicheng_control& operator=(const Ruicheng_control& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ruicheng_control(Ruicheng_control&& from) noexcept
    : Ruicheng_control() {
    *this = ::std::move(from);
  }

  inline Ruicheng_control& operator=(Ruicheng_control&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ruicheng_control& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ruicheng_control* internal_default_instance() {
    return reinterpret_cast<const Ruicheng_control*>(
               &_Ruicheng_control_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Ruicheng_control* other);
  friend void swap(Ruicheng_control& a, Ruicheng_control& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ruicheng_control* New() const final {
    return CreateMaybeMessage<Ruicheng_control>(NULL);
  }

  Ruicheng_control* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ruicheng_control>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ruicheng_control& from);
  void MergeFrom(const Ruicheng_control& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ruicheng_control* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 TargetSteeringAngle = 1 [default = 0];
  bool has_targetsteeringangle() const;
  void clear_targetsteeringangle();
  static const int kTargetSteeringAngleFieldNumber = 1;
  ::google::protobuf::int32 targetsteeringangle() const;
  void set_targetsteeringangle(::google::protobuf::int32 value);

  // required uint32 TargetSpeed = 2 [default = 0];
  bool has_targetspeed() const;
  void clear_targetspeed();
  static const int kTargetSpeedFieldNumber = 2;
  ::google::protobuf::uint32 targetspeed() const;
  void set_targetspeed(::google::protobuf::uint32 value);

  // optional uint32 TargetLedStatus = 3 [default = 0];
  bool has_targetledstatus() const;
  void clear_targetledstatus();
  static const int kTargetLedStatusFieldNumber = 3;
  ::google::protobuf::uint32 targetledstatus() const;
  void set_targetledstatus(::google::protobuf::uint32 value);

  // optional uint32 LightSwitch = 4 [default = 0];
  bool has_lightswitch() const;
  void clear_lightswitch();
  static const int kLightSwitchFieldNumber = 4;
  ::google::protobuf::uint32 lightswitch() const;
  void set_lightswitch(::google::protobuf::uint32 value);

  // required uint32 SpeedGear = 5 [default = 0];
  bool has_speedgear() const;
  void clear_speedgear();
  static const int kSpeedGearFieldNumber = 5;
  ::google::protobuf::uint32 speedgear() const;
  void set_speedgear(::google::protobuf::uint32 value);

  // optional uint32 TimeStamp = 6;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimeStampFieldNumber = 6;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Car_msg.Ruicheng_control)
 private:
  void set_has_targetsteeringangle();
  void clear_has_targetsteeringangle();
  void set_has_targetspeed();
  void clear_has_targetspeed();
  void set_has_targetledstatus();
  void clear_has_targetledstatus();
  void set_has_lightswitch();
  void clear_has_lightswitch();
  void set_has_speedgear();
  void clear_has_speedgear();
  void set_has_timestamp();
  void clear_has_timestamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 targetsteeringangle_;
  ::google::protobuf::uint32 targetspeed_;
  ::google::protobuf::uint32 targetledstatus_;
  ::google::protobuf::uint32 lightswitch_;
  ::google::protobuf::uint32 speedgear_;
  ::google::protobuf::uint32 timestamp_;
  friend struct ::protobuf_Vehicle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ruicheng_feedback : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Car_msg.Ruicheng_feedback) */ {
 public:
  Ruicheng_feedback();
  virtual ~Ruicheng_feedback();

  Ruicheng_feedback(const Ruicheng_feedback& from);

  inline Ruicheng_feedback& operator=(const Ruicheng_feedback& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ruicheng_feedback(Ruicheng_feedback&& from) noexcept
    : Ruicheng_feedback() {
    *this = ::std::move(from);
  }

  inline Ruicheng_feedback& operator=(Ruicheng_feedback&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ruicheng_feedback& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ruicheng_feedback* internal_default_instance() {
    return reinterpret_cast<const Ruicheng_feedback*>(
               &_Ruicheng_feedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Ruicheng_feedback* other);
  friend void swap(Ruicheng_feedback& a, Ruicheng_feedback& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ruicheng_feedback* New() const final {
    return CreateMaybeMessage<Ruicheng_feedback>(NULL);
  }

  Ruicheng_feedback* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ruicheng_feedback>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ruicheng_feedback& from);
  void MergeFrom(const Ruicheng_feedback& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ruicheng_feedback* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 EmBrakerStatus = 1;
  bool has_embrakerstatus() const;
  void clear_embrakerstatus();
  static const int kEmBrakerStatusFieldNumber = 1;
  ::google::protobuf::uint32 embrakerstatus() const;
  void set_embrakerstatus(::google::protobuf::uint32 value);

  // required uint32 EpsStatus = 2;
  bool has_epsstatus() const;
  void clear_epsstatus();
  static const int kEpsStatusFieldNumber = 2;
  ::google::protobuf::uint32 epsstatus() const;
  void set_epsstatus(::google::protobuf::uint32 value);

  // required uint32 TorqueStatus = 3;
  bool has_torquestatus() const;
  void clear_torquestatus();
  static const int kTorqueStatusFieldNumber = 3;
  ::google::protobuf::uint32 torquestatus() const;
  void set_torquestatus(::google::protobuf::uint32 value);

  // required uint32 DecStatus = 4;
  bool has_decstatus() const;
  void clear_decstatus();
  static const int kDecStatusFieldNumber = 4;
  ::google::protobuf::uint32 decstatus() const;
  void set_decstatus(::google::protobuf::uint32 value);

  // required uint32 SysStatus = 5;
  bool has_sysstatus() const;
  void clear_sysstatus();
  static const int kSysStatusFieldNumber = 5;
  ::google::protobuf::uint32 sysstatus() const;
  void set_sysstatus(::google::protobuf::uint32 value);

  // required uint32 ucGearCtrlStatus = 6;
  bool has_ucgearctrlstatus() const;
  void clear_ucgearctrlstatus();
  static const int kUcGearCtrlStatusFieldNumber = 6;
  ::google::protobuf::uint32 ucgearctrlstatus() const;
  void set_ucgearctrlstatus(::google::protobuf::uint32 value);

  // required uint32 BrakePedalStatus = 7;
  bool has_brakepedalstatus() const;
  void clear_brakepedalstatus();
  static const int kBrakePedalStatusFieldNumber = 7;
  ::google::protobuf::uint32 brakepedalstatus() const;
  void set_brakepedalstatus(::google::protobuf::uint32 value);

  // required uint32 CruiseStatus = 8;
  bool has_cruisestatus() const;
  void clear_cruisestatus();
  static const int kCruiseStatusFieldNumber = 8;
  ::google::protobuf::uint32 cruisestatus() const;
  void set_cruisestatus(::google::protobuf::uint32 value);

  // required uint32 ucGearPosition = 9;
  bool has_ucgearposition() const;
  void clear_ucgearposition();
  static const int kUcGearPositionFieldNumber = 9;
  ::google::protobuf::uint32 ucgearposition() const;
  void set_ucgearposition(::google::protobuf::uint32 value);

  // required uint32 uiSpeed = 10;
  bool has_uispeed() const;
  void clear_uispeed();
  static const int kUiSpeedFieldNumber = 10;
  ::google::protobuf::uint32 uispeed() const;
  void set_uispeed(::google::protobuf::uint32 value);

  // required float uiSteerAngle = 11;
  bool has_uisteerangle() const;
  void clear_uisteerangle();
  static const int kUiSteerAngleFieldNumber = 11;
  float uisteerangle() const;
  void set_uisteerangle(float value);

  // @@protoc_insertion_point(class_scope:Car_msg.Ruicheng_feedback)
 private:
  void set_has_embrakerstatus();
  void clear_has_embrakerstatus();
  void set_has_epsstatus();
  void clear_has_epsstatus();
  void set_has_torquestatus();
  void clear_has_torquestatus();
  void set_has_decstatus();
  void clear_has_decstatus();
  void set_has_sysstatus();
  void clear_has_sysstatus();
  void set_has_ucgearctrlstatus();
  void clear_has_ucgearctrlstatus();
  void set_has_brakepedalstatus();
  void clear_has_brakepedalstatus();
  void set_has_cruisestatus();
  void clear_has_cruisestatus();
  void set_has_ucgearposition();
  void clear_has_ucgearposition();
  void set_has_uispeed();
  void clear_has_uispeed();
  void set_has_uisteerangle();
  void clear_has_uisteerangle();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 embrakerstatus_;
  ::google::protobuf::uint32 epsstatus_;
  ::google::protobuf::uint32 torquestatus_;
  ::google::protobuf::uint32 decstatus_;
  ::google::protobuf::uint32 sysstatus_;
  ::google::protobuf::uint32 ucgearctrlstatus_;
  ::google::protobuf::uint32 brakepedalstatus_;
  ::google::protobuf::uint32 cruisestatus_;
  ::google::protobuf::uint32 ucgearposition_;
  ::google::protobuf::uint32 uispeed_;
  float uisteerangle_;
  friend struct ::protobuf_Vehicle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS55_control : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Car_msg.CS55_control) */ {
 public:
  CS55_control();
  virtual ~CS55_control();

  CS55_control(const CS55_control& from);

  inline CS55_control& operator=(const CS55_control& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CS55_control(CS55_control&& from) noexcept
    : CS55_control() {
    *this = ::std::move(from);
  }

  inline CS55_control& operator=(CS55_control&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS55_control& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS55_control* internal_default_instance() {
    return reinterpret_cast<const CS55_control*>(
               &_CS55_control_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CS55_control* other);
  friend void swap(CS55_control& a, CS55_control& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CS55_control* New() const final {
    return CreateMaybeMessage<CS55_control>(NULL);
  }

  CS55_control* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CS55_control>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CS55_control& from);
  void MergeFrom(const CS55_control& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS55_control* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 TargetSteeringAngle = 1 [default = 0];
  bool has_targetsteeringangle() const;
  void clear_targetsteeringangle();
  static const int kTargetSteeringAngleFieldNumber = 1;
  ::google::protobuf::int32 targetsteeringangle() const;
  void set_targetsteeringangle(::google::protobuf::int32 value);

  // required uint32 TargetSpeed = 2 [default = 0];
  bool has_targetspeed() const;
  void clear_targetspeed();
  static const int kTargetSpeedFieldNumber = 2;
  ::google::protobuf::uint32 targetspeed() const;
  void set_targetspeed(::google::protobuf::uint32 value);

  // optional uint32 TargetLedStatus = 3 [default = 0];
  bool has_targetledstatus() const;
  void clear_targetledstatus();
  static const int kTargetLedStatusFieldNumber = 3;
  ::google::protobuf::uint32 targetledstatus() const;
  void set_targetledstatus(::google::protobuf::uint32 value);

  // optional uint32 LightSwitch = 4 [default = 0];
  bool has_lightswitch() const;
  void clear_lightswitch();
  static const int kLightSwitchFieldNumber = 4;
  ::google::protobuf::uint32 lightswitch() const;
  void set_lightswitch(::google::protobuf::uint32 value);

  // required uint32 SpeedGear = 5 [default = 0];
  bool has_speedgear() const;
  void clear_speedgear();
  static const int kSpeedGearFieldNumber = 5;
  ::google::protobuf::uint32 speedgear() const;
  void set_speedgear(::google::protobuf::uint32 value);

  // optional uint32 TimeStamp = 6;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimeStampFieldNumber = 6;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Car_msg.CS55_control)
 private:
  void set_has_targetsteeringangle();
  void clear_has_targetsteeringangle();
  void set_has_targetspeed();
  void clear_has_targetspeed();
  void set_has_targetledstatus();
  void clear_has_targetledstatus();
  void set_has_lightswitch();
  void clear_has_lightswitch();
  void set_has_speedgear();
  void clear_has_speedgear();
  void set_has_timestamp();
  void clear_has_timestamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 targetsteeringangle_;
  ::google::protobuf::uint32 targetspeed_;
  ::google::protobuf::uint32 targetledstatus_;
  ::google::protobuf::uint32 lightswitch_;
  ::google::protobuf::uint32 speedgear_;
  ::google::protobuf::uint32 timestamp_;
  friend struct ::protobuf_Vehicle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CS55_feedback : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Car_msg.CS55_feedback) */ {
 public:
  CS55_feedback();
  virtual ~CS55_feedback();

  CS55_feedback(const CS55_feedback& from);

  inline CS55_feedback& operator=(const CS55_feedback& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CS55_feedback(CS55_feedback&& from) noexcept
    : CS55_feedback() {
    *this = ::std::move(from);
  }

  inline CS55_feedback& operator=(CS55_feedback&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS55_feedback& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS55_feedback* internal_default_instance() {
    return reinterpret_cast<const CS55_feedback*>(
               &_CS55_feedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CS55_feedback* other);
  friend void swap(CS55_feedback& a, CS55_feedback& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CS55_feedback* New() const final {
    return CreateMaybeMessage<CS55_feedback>(NULL);
  }

  CS55_feedback* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CS55_feedback>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CS55_feedback& from);
  void MergeFrom(const CS55_feedback& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS55_feedback* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 EmBrakerStatus = 1;
  bool has_embrakerstatus() const;
  void clear_embrakerstatus();
  static const int kEmBrakerStatusFieldNumber = 1;
  ::google::protobuf::uint32 embrakerstatus() const;
  void set_embrakerstatus(::google::protobuf::uint32 value);

  // required uint32 EpsStatus = 2;
  bool has_epsstatus() const;
  void clear_epsstatus();
  static const int kEpsStatusFieldNumber = 2;
  ::google::protobuf::uint32 epsstatus() const;
  void set_epsstatus(::google::protobuf::uint32 value);

  // required uint32 TorqueStatus = 3;
  bool has_torquestatus() const;
  void clear_torquestatus();
  static const int kTorqueStatusFieldNumber = 3;
  ::google::protobuf::uint32 torquestatus() const;
  void set_torquestatus(::google::protobuf::uint32 value);

  // required uint32 DecStatus = 4;
  bool has_decstatus() const;
  void clear_decstatus();
  static const int kDecStatusFieldNumber = 4;
  ::google::protobuf::uint32 decstatus() const;
  void set_decstatus(::google::protobuf::uint32 value);

  // required uint32 SysStatus = 5;
  bool has_sysstatus() const;
  void clear_sysstatus();
  static const int kSysStatusFieldNumber = 5;
  ::google::protobuf::uint32 sysstatus() const;
  void set_sysstatus(::google::protobuf::uint32 value);

  // required uint32 ucGearCtrlStatus = 6;
  bool has_ucgearctrlstatus() const;
  void clear_ucgearctrlstatus();
  static const int kUcGearCtrlStatusFieldNumber = 6;
  ::google::protobuf::uint32 ucgearctrlstatus() const;
  void set_ucgearctrlstatus(::google::protobuf::uint32 value);

  // required uint32 BrakePedalStatus = 7;
  bool has_brakepedalstatus() const;
  void clear_brakepedalstatus();
  static const int kBrakePedalStatusFieldNumber = 7;
  ::google::protobuf::uint32 brakepedalstatus() const;
  void set_brakepedalstatus(::google::protobuf::uint32 value);

  // required uint32 CruiseStatus = 8;
  bool has_cruisestatus() const;
  void clear_cruisestatus();
  static const int kCruiseStatusFieldNumber = 8;
  ::google::protobuf::uint32 cruisestatus() const;
  void set_cruisestatus(::google::protobuf::uint32 value);

  // required uint32 ucGearPosition = 9;
  bool has_ucgearposition() const;
  void clear_ucgearposition();
  static const int kUcGearPositionFieldNumber = 9;
  ::google::protobuf::uint32 ucgearposition() const;
  void set_ucgearposition(::google::protobuf::uint32 value);

  // required uint32 uiSpeed = 10;
  bool has_uispeed() const;
  void clear_uispeed();
  static const int kUiSpeedFieldNumber = 10;
  ::google::protobuf::uint32 uispeed() const;
  void set_uispeed(::google::protobuf::uint32 value);

  // required float uiSteerAngle = 11;
  bool has_uisteerangle() const;
  void clear_uisteerangle();
  static const int kUiSteerAngleFieldNumber = 11;
  float uisteerangle() const;
  void set_uisteerangle(float value);

  // @@protoc_insertion_point(class_scope:Car_msg.CS55_feedback)
 private:
  void set_has_embrakerstatus();
  void clear_has_embrakerstatus();
  void set_has_epsstatus();
  void clear_has_epsstatus();
  void set_has_torquestatus();
  void clear_has_torquestatus();
  void set_has_decstatus();
  void clear_has_decstatus();
  void set_has_sysstatus();
  void clear_has_sysstatus();
  void set_has_ucgearctrlstatus();
  void clear_has_ucgearctrlstatus();
  void set_has_brakepedalstatus();
  void clear_has_brakepedalstatus();
  void set_has_cruisestatus();
  void clear_has_cruisestatus();
  void set_has_ucgearposition();
  void clear_has_ucgearposition();
  void set_has_uispeed();
  void clear_has_uispeed();
  void set_has_uisteerangle();
  void clear_has_uisteerangle();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 embrakerstatus_;
  ::google::protobuf::uint32 epsstatus_;
  ::google::protobuf::uint32 torquestatus_;
  ::google::protobuf::uint32 decstatus_;
  ::google::protobuf::uint32 sysstatus_;
  ::google::protobuf::uint32 ucgearctrlstatus_;
  ::google::protobuf::uint32 brakepedalstatus_;
  ::google::protobuf::uint32 cruisestatus_;
  ::google::protobuf::uint32 ucgearposition_;
  ::google::protobuf::uint32 uispeed_;
  float uisteerangle_;
  friend struct ::protobuf_Vehicle_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Common_control

// required uint64 Timestamp = 7;
inline bool Common_control::has_timestamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Common_control::set_has_timestamp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Common_control::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Common_control::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 Common_control::timestamp() const {
  // @@protoc_insertion_point(field_get:Car_msg.Common_control.Timestamp)
  return timestamp_;
}
inline void Common_control::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.Common_control.Timestamp)
}

// required string VehicleVersion = 6;
inline bool Common_control::has_vehicleversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Common_control::set_has_vehicleversion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Common_control::clear_has_vehicleversion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Common_control::clear_vehicleversion() {
  vehicleversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vehicleversion();
}
inline const ::std::string& Common_control::vehicleversion() const {
  // @@protoc_insertion_point(field_get:Car_msg.Common_control.VehicleVersion)
  return vehicleversion_.GetNoArena();
}
inline void Common_control::set_vehicleversion(const ::std::string& value) {
  set_has_vehicleversion();
  vehicleversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Car_msg.Common_control.VehicleVersion)
}
#if LANG_CXX11
inline void Common_control::set_vehicleversion(::std::string&& value) {
  set_has_vehicleversion();
  vehicleversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Car_msg.Common_control.VehicleVersion)
}
#endif
inline void Common_control::set_vehicleversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vehicleversion();
  vehicleversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Car_msg.Common_control.VehicleVersion)
}
inline void Common_control::set_vehicleversion(const char* value, size_t size) {
  set_has_vehicleversion();
  vehicleversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Car_msg.Common_control.VehicleVersion)
}
inline ::std::string* Common_control::mutable_vehicleversion() {
  set_has_vehicleversion();
  // @@protoc_insertion_point(field_mutable:Car_msg.Common_control.VehicleVersion)
  return vehicleversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Common_control::release_vehicleversion() {
  // @@protoc_insertion_point(field_release:Car_msg.Common_control.VehicleVersion)
  if (!has_vehicleversion()) {
    return NULL;
  }
  clear_has_vehicleversion();
  return vehicleversion_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Common_control::set_allocated_vehicleversion(::std::string* vehicleversion) {
  if (vehicleversion != NULL) {
    set_has_vehicleversion();
  } else {
    clear_has_vehicleversion();
  }
  vehicleversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicleversion);
  // @@protoc_insertion_point(field_set_allocated:Car_msg.Common_control.VehicleVersion)
}

// required int32 TargetSteeringAngle = 1;
inline bool Common_control::has_targetsteeringangle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Common_control::set_has_targetsteeringangle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Common_control::clear_has_targetsteeringangle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Common_control::clear_targetsteeringangle() {
  targetsteeringangle_ = 0;
  clear_has_targetsteeringangle();
}
inline ::google::protobuf::int32 Common_control::targetsteeringangle() const {
  // @@protoc_insertion_point(field_get:Car_msg.Common_control.TargetSteeringAngle)
  return targetsteeringangle_;
}
inline void Common_control::set_targetsteeringangle(::google::protobuf::int32 value) {
  set_has_targetsteeringangle();
  targetsteeringangle_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.Common_control.TargetSteeringAngle)
}

// optional int32 TargetSteeringAngularVelocity = 2;
inline bool Common_control::has_targetsteeringangularvelocity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Common_control::set_has_targetsteeringangularvelocity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Common_control::clear_has_targetsteeringangularvelocity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Common_control::clear_targetsteeringangularvelocity() {
  targetsteeringangularvelocity_ = 0;
  clear_has_targetsteeringangularvelocity();
}
inline ::google::protobuf::int32 Common_control::targetsteeringangularvelocity() const {
  // @@protoc_insertion_point(field_get:Car_msg.Common_control.TargetSteeringAngularVelocity)
  return targetsteeringangularvelocity_;
}
inline void Common_control::set_targetsteeringangularvelocity(::google::protobuf::int32 value) {
  set_has_targetsteeringangularvelocity();
  targetsteeringangularvelocity_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.Common_control.TargetSteeringAngularVelocity)
}

// required int32 SteeringMode = 8;
inline bool Common_control::has_steeringmode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Common_control::set_has_steeringmode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Common_control::clear_has_steeringmode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Common_control::clear_steeringmode() {
  steeringmode_ = 0;
  clear_has_steeringmode();
}
inline ::google::protobuf::int32 Common_control::steeringmode() const {
  // @@protoc_insertion_point(field_get:Car_msg.Common_control.SteeringMode)
  return steeringmode_;
}
inline void Common_control::set_steeringmode(::google::protobuf::int32 value) {
  set_has_steeringmode();
  steeringmode_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.Common_control.SteeringMode)
}

// required int32 TargetSpeed = 3;
inline bool Common_control::has_targetspeed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Common_control::set_has_targetspeed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Common_control::clear_has_targetspeed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Common_control::clear_targetspeed() {
  targetspeed_ = 0;
  clear_has_targetspeed();
}
inline ::google::protobuf::int32 Common_control::targetspeed() const {
  // @@protoc_insertion_point(field_get:Car_msg.Common_control.TargetSpeed)
  return targetspeed_;
}
inline void Common_control::set_targetspeed(::google::protobuf::int32 value) {
  set_has_targetspeed();
  targetspeed_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.Common_control.TargetSpeed)
}

// required int32 TargetAcceleration = 4;
inline bool Common_control::has_targetacceleration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Common_control::set_has_targetacceleration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Common_control::clear_has_targetacceleration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Common_control::clear_targetacceleration() {
  targetacceleration_ = 0;
  clear_has_targetacceleration();
}
inline ::google::protobuf::int32 Common_control::targetacceleration() const {
  // @@protoc_insertion_point(field_get:Car_msg.Common_control.TargetAcceleration)
  return targetacceleration_;
}
inline void Common_control::set_targetacceleration(::google::protobuf::int32 value) {
  set_has_targetacceleration();
  targetacceleration_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.Common_control.TargetAcceleration)
}

// required int32 AccMode = 9;
inline bool Common_control::has_accmode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Common_control::set_has_accmode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Common_control::clear_has_accmode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Common_control::clear_accmode() {
  accmode_ = 0;
  clear_has_accmode();
}
inline ::google::protobuf::int32 Common_control::accmode() const {
  // @@protoc_insertion_point(field_get:Car_msg.Common_control.AccMode)
  return accmode_;
}
inline void Common_control::set_accmode(::google::protobuf::int32 value) {
  set_has_accmode();
  accmode_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.Common_control.AccMode)
}

// required int32 TargetDeceleration = 5;
inline bool Common_control::has_targetdeceleration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Common_control::set_has_targetdeceleration() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Common_control::clear_has_targetdeceleration() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Common_control::clear_targetdeceleration() {
  targetdeceleration_ = 0;
  clear_has_targetdeceleration();
}
inline ::google::protobuf::int32 Common_control::targetdeceleration() const {
  // @@protoc_insertion_point(field_get:Car_msg.Common_control.TargetDeceleration)
  return targetdeceleration_;
}
inline void Common_control::set_targetdeceleration(::google::protobuf::int32 value) {
  set_has_targetdeceleration();
  targetdeceleration_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.Common_control.TargetDeceleration)
}

// required int32 DecMode = 10;
inline bool Common_control::has_decmode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Common_control::set_has_decmode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Common_control::clear_has_decmode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Common_control::clear_decmode() {
  decmode_ = 0;
  clear_has_decmode();
}
inline ::google::protobuf::int32 Common_control::decmode() const {
  // @@protoc_insertion_point(field_get:Car_msg.Common_control.DecMode)
  return decmode_;
}
inline void Common_control::set_decmode(::google::protobuf::int32 value) {
  set_has_decmode();
  decmode_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.Common_control.DecMode)
}

// -------------------------------------------------------------------

// Common_feedback

// required uint32 Speed = 1;
inline bool Common_feedback::has_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Common_feedback::set_has_speed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Common_feedback::clear_has_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Common_feedback::clear_speed() {
  speed_ = 0u;
  clear_has_speed();
}
inline ::google::protobuf::uint32 Common_feedback::speed() const {
  // @@protoc_insertion_point(field_get:Car_msg.Common_feedback.Speed)
  return speed_;
}
inline void Common_feedback::set_speed(::google::protobuf::uint32 value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.Common_feedback.Speed)
}

// required int32 Steer = 2;
inline bool Common_feedback::has_steer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Common_feedback::set_has_steer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Common_feedback::clear_has_steer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Common_feedback::clear_steer() {
  steer_ = 0;
  clear_has_steer();
}
inline ::google::protobuf::int32 Common_feedback::steer() const {
  // @@protoc_insertion_point(field_get:Car_msg.Common_feedback.Steer)
  return steer_;
}
inline void Common_feedback::set_steer(::google::protobuf::int32 value) {
  set_has_steer();
  steer_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.Common_feedback.Steer)
}

// required int32 Error = 3;
inline bool Common_feedback::has_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Common_feedback::set_has_error() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Common_feedback::clear_has_error() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Common_feedback::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::google::protobuf::int32 Common_feedback::error() const {
  // @@protoc_insertion_point(field_get:Car_msg.Common_feedback.Error)
  return error_;
}
inline void Common_feedback::set_error(::google::protobuf::int32 value) {
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.Common_feedback.Error)
}

// required uint32 Mode = 4;
inline bool Common_feedback::has_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Common_feedback::set_has_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Common_feedback::clear_has_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Common_feedback::clear_mode() {
  mode_ = 0u;
  clear_has_mode();
}
inline ::google::protobuf::uint32 Common_feedback::mode() const {
  // @@protoc_insertion_point(field_get:Car_msg.Common_feedback.Mode)
  return mode_;
}
inline void Common_feedback::set_mode(::google::protobuf::uint32 value) {
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.Common_feedback.Mode)
}

// optional uint32 SpeedLfWheel = 5;
inline bool Common_feedback::has_speedlfwheel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Common_feedback::set_has_speedlfwheel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Common_feedback::clear_has_speedlfwheel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Common_feedback::clear_speedlfwheel() {
  speedlfwheel_ = 0u;
  clear_has_speedlfwheel();
}
inline ::google::protobuf::uint32 Common_feedback::speedlfwheel() const {
  // @@protoc_insertion_point(field_get:Car_msg.Common_feedback.SpeedLfWheel)
  return speedlfwheel_;
}
inline void Common_feedback::set_speedlfwheel(::google::protobuf::uint32 value) {
  set_has_speedlfwheel();
  speedlfwheel_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.Common_feedback.SpeedLfWheel)
}

// optional uint32 SpeedRfWheel = 6;
inline bool Common_feedback::has_speedrfwheel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Common_feedback::set_has_speedrfwheel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Common_feedback::clear_has_speedrfwheel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Common_feedback::clear_speedrfwheel() {
  speedrfwheel_ = 0u;
  clear_has_speedrfwheel();
}
inline ::google::protobuf::uint32 Common_feedback::speedrfwheel() const {
  // @@protoc_insertion_point(field_get:Car_msg.Common_feedback.SpeedRfWheel)
  return speedrfwheel_;
}
inline void Common_feedback::set_speedrfwheel(::google::protobuf::uint32 value) {
  set_has_speedrfwheel();
  speedrfwheel_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.Common_feedback.SpeedRfWheel)
}

// optional uint32 SpeedLBWheel = 7;
inline bool Common_feedback::has_speedlbwheel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Common_feedback::set_has_speedlbwheel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Common_feedback::clear_has_speedlbwheel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Common_feedback::clear_speedlbwheel() {
  speedlbwheel_ = 0u;
  clear_has_speedlbwheel();
}
inline ::google::protobuf::uint32 Common_feedback::speedlbwheel() const {
  // @@protoc_insertion_point(field_get:Car_msg.Common_feedback.SpeedLBWheel)
  return speedlbwheel_;
}
inline void Common_feedback::set_speedlbwheel(::google::protobuf::uint32 value) {
  set_has_speedlbwheel();
  speedlbwheel_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.Common_feedback.SpeedLBWheel)
}

// optional uint32 SpeedRbWheel = 8;
inline bool Common_feedback::has_speedrbwheel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Common_feedback::set_has_speedrbwheel() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Common_feedback::clear_has_speedrbwheel() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Common_feedback::clear_speedrbwheel() {
  speedrbwheel_ = 0u;
  clear_has_speedrbwheel();
}
inline ::google::protobuf::uint32 Common_feedback::speedrbwheel() const {
  // @@protoc_insertion_point(field_get:Car_msg.Common_feedback.SpeedRbWheel)
  return speedrbwheel_;
}
inline void Common_feedback::set_speedrbwheel(::google::protobuf::uint32 value) {
  set_has_speedrbwheel();
  speedrbwheel_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.Common_feedback.SpeedRbWheel)
}

// required string VehicleVersion = 9;
inline bool Common_feedback::has_vehicleversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Common_feedback::set_has_vehicleversion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Common_feedback::clear_has_vehicleversion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Common_feedback::clear_vehicleversion() {
  vehicleversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vehicleversion();
}
inline const ::std::string& Common_feedback::vehicleversion() const {
  // @@protoc_insertion_point(field_get:Car_msg.Common_feedback.VehicleVersion)
  return vehicleversion_.GetNoArena();
}
inline void Common_feedback::set_vehicleversion(const ::std::string& value) {
  set_has_vehicleversion();
  vehicleversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Car_msg.Common_feedback.VehicleVersion)
}
#if LANG_CXX11
inline void Common_feedback::set_vehicleversion(::std::string&& value) {
  set_has_vehicleversion();
  vehicleversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Car_msg.Common_feedback.VehicleVersion)
}
#endif
inline void Common_feedback::set_vehicleversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vehicleversion();
  vehicleversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Car_msg.Common_feedback.VehicleVersion)
}
inline void Common_feedback::set_vehicleversion(const char* value, size_t size) {
  set_has_vehicleversion();
  vehicleversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Car_msg.Common_feedback.VehicleVersion)
}
inline ::std::string* Common_feedback::mutable_vehicleversion() {
  set_has_vehicleversion();
  // @@protoc_insertion_point(field_mutable:Car_msg.Common_feedback.VehicleVersion)
  return vehicleversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Common_feedback::release_vehicleversion() {
  // @@protoc_insertion_point(field_release:Car_msg.Common_feedback.VehicleVersion)
  if (!has_vehicleversion()) {
    return NULL;
  }
  clear_has_vehicleversion();
  return vehicleversion_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Common_feedback::set_allocated_vehicleversion(::std::string* vehicleversion) {
  if (vehicleversion != NULL) {
    set_has_vehicleversion();
  } else {
    clear_has_vehicleversion();
  }
  vehicleversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicleversion);
  // @@protoc_insertion_point(field_set_allocated:Car_msg.Common_feedback.VehicleVersion)
}

// -------------------------------------------------------------------

// Ruicheng_control

// required int32 TargetSteeringAngle = 1 [default = 0];
inline bool Ruicheng_control::has_targetsteeringangle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ruicheng_control::set_has_targetsteeringangle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ruicheng_control::clear_has_targetsteeringangle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ruicheng_control::clear_targetsteeringangle() {
  targetsteeringangle_ = 0;
  clear_has_targetsteeringangle();
}
inline ::google::protobuf::int32 Ruicheng_control::targetsteeringangle() const {
  // @@protoc_insertion_point(field_get:Car_msg.Ruicheng_control.TargetSteeringAngle)
  return targetsteeringangle_;
}
inline void Ruicheng_control::set_targetsteeringangle(::google::protobuf::int32 value) {
  set_has_targetsteeringangle();
  targetsteeringangle_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.Ruicheng_control.TargetSteeringAngle)
}

// required uint32 TargetSpeed = 2 [default = 0];
inline bool Ruicheng_control::has_targetspeed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ruicheng_control::set_has_targetspeed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ruicheng_control::clear_has_targetspeed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ruicheng_control::clear_targetspeed() {
  targetspeed_ = 0u;
  clear_has_targetspeed();
}
inline ::google::protobuf::uint32 Ruicheng_control::targetspeed() const {
  // @@protoc_insertion_point(field_get:Car_msg.Ruicheng_control.TargetSpeed)
  return targetspeed_;
}
inline void Ruicheng_control::set_targetspeed(::google::protobuf::uint32 value) {
  set_has_targetspeed();
  targetspeed_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.Ruicheng_control.TargetSpeed)
}

// optional uint32 TargetLedStatus = 3 [default = 0];
inline bool Ruicheng_control::has_targetledstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ruicheng_control::set_has_targetledstatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ruicheng_control::clear_has_targetledstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ruicheng_control::clear_targetledstatus() {
  targetledstatus_ = 0u;
  clear_has_targetledstatus();
}
inline ::google::protobuf::uint32 Ruicheng_control::targetledstatus() const {
  // @@protoc_insertion_point(field_get:Car_msg.Ruicheng_control.TargetLedStatus)
  return targetledstatus_;
}
inline void Ruicheng_control::set_targetledstatus(::google::protobuf::uint32 value) {
  set_has_targetledstatus();
  targetledstatus_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.Ruicheng_control.TargetLedStatus)
}

// optional uint32 LightSwitch = 4 [default = 0];
inline bool Ruicheng_control::has_lightswitch() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ruicheng_control::set_has_lightswitch() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Ruicheng_control::clear_has_lightswitch() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Ruicheng_control::clear_lightswitch() {
  lightswitch_ = 0u;
  clear_has_lightswitch();
}
inline ::google::protobuf::uint32 Ruicheng_control::lightswitch() const {
  // @@protoc_insertion_point(field_get:Car_msg.Ruicheng_control.LightSwitch)
  return lightswitch_;
}
inline void Ruicheng_control::set_lightswitch(::google::protobuf::uint32 value) {
  set_has_lightswitch();
  lightswitch_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.Ruicheng_control.LightSwitch)
}

// required uint32 SpeedGear = 5 [default = 0];
inline bool Ruicheng_control::has_speedgear() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ruicheng_control::set_has_speedgear() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Ruicheng_control::clear_has_speedgear() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Ruicheng_control::clear_speedgear() {
  speedgear_ = 0u;
  clear_has_speedgear();
}
inline ::google::protobuf::uint32 Ruicheng_control::speedgear() const {
  // @@protoc_insertion_point(field_get:Car_msg.Ruicheng_control.SpeedGear)
  return speedgear_;
}
inline void Ruicheng_control::set_speedgear(::google::protobuf::uint32 value) {
  set_has_speedgear();
  speedgear_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.Ruicheng_control.SpeedGear)
}

// optional uint32 TimeStamp = 6;
inline bool Ruicheng_control::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ruicheng_control::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Ruicheng_control::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Ruicheng_control::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 Ruicheng_control::timestamp() const {
  // @@protoc_insertion_point(field_get:Car_msg.Ruicheng_control.TimeStamp)
  return timestamp_;
}
inline void Ruicheng_control::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.Ruicheng_control.TimeStamp)
}

// -------------------------------------------------------------------

// Ruicheng_feedback

// required uint32 EmBrakerStatus = 1;
inline bool Ruicheng_feedback::has_embrakerstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ruicheng_feedback::set_has_embrakerstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ruicheng_feedback::clear_has_embrakerstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ruicheng_feedback::clear_embrakerstatus() {
  embrakerstatus_ = 0u;
  clear_has_embrakerstatus();
}
inline ::google::protobuf::uint32 Ruicheng_feedback::embrakerstatus() const {
  // @@protoc_insertion_point(field_get:Car_msg.Ruicheng_feedback.EmBrakerStatus)
  return embrakerstatus_;
}
inline void Ruicheng_feedback::set_embrakerstatus(::google::protobuf::uint32 value) {
  set_has_embrakerstatus();
  embrakerstatus_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.Ruicheng_feedback.EmBrakerStatus)
}

// required uint32 EpsStatus = 2;
inline bool Ruicheng_feedback::has_epsstatus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ruicheng_feedback::set_has_epsstatus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ruicheng_feedback::clear_has_epsstatus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ruicheng_feedback::clear_epsstatus() {
  epsstatus_ = 0u;
  clear_has_epsstatus();
}
inline ::google::protobuf::uint32 Ruicheng_feedback::epsstatus() const {
  // @@protoc_insertion_point(field_get:Car_msg.Ruicheng_feedback.EpsStatus)
  return epsstatus_;
}
inline void Ruicheng_feedback::set_epsstatus(::google::protobuf::uint32 value) {
  set_has_epsstatus();
  epsstatus_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.Ruicheng_feedback.EpsStatus)
}

// required uint32 TorqueStatus = 3;
inline bool Ruicheng_feedback::has_torquestatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ruicheng_feedback::set_has_torquestatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ruicheng_feedback::clear_has_torquestatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ruicheng_feedback::clear_torquestatus() {
  torquestatus_ = 0u;
  clear_has_torquestatus();
}
inline ::google::protobuf::uint32 Ruicheng_feedback::torquestatus() const {
  // @@protoc_insertion_point(field_get:Car_msg.Ruicheng_feedback.TorqueStatus)
  return torquestatus_;
}
inline void Ruicheng_feedback::set_torquestatus(::google::protobuf::uint32 value) {
  set_has_torquestatus();
  torquestatus_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.Ruicheng_feedback.TorqueStatus)
}

// required uint32 DecStatus = 4;
inline bool Ruicheng_feedback::has_decstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ruicheng_feedback::set_has_decstatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Ruicheng_feedback::clear_has_decstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Ruicheng_feedback::clear_decstatus() {
  decstatus_ = 0u;
  clear_has_decstatus();
}
inline ::google::protobuf::uint32 Ruicheng_feedback::decstatus() const {
  // @@protoc_insertion_point(field_get:Car_msg.Ruicheng_feedback.DecStatus)
  return decstatus_;
}
inline void Ruicheng_feedback::set_decstatus(::google::protobuf::uint32 value) {
  set_has_decstatus();
  decstatus_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.Ruicheng_feedback.DecStatus)
}

// required uint32 SysStatus = 5;
inline bool Ruicheng_feedback::has_sysstatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ruicheng_feedback::set_has_sysstatus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Ruicheng_feedback::clear_has_sysstatus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Ruicheng_feedback::clear_sysstatus() {
  sysstatus_ = 0u;
  clear_has_sysstatus();
}
inline ::google::protobuf::uint32 Ruicheng_feedback::sysstatus() const {
  // @@protoc_insertion_point(field_get:Car_msg.Ruicheng_feedback.SysStatus)
  return sysstatus_;
}
inline void Ruicheng_feedback::set_sysstatus(::google::protobuf::uint32 value) {
  set_has_sysstatus();
  sysstatus_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.Ruicheng_feedback.SysStatus)
}

// required uint32 ucGearCtrlStatus = 6;
inline bool Ruicheng_feedback::has_ucgearctrlstatus() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ruicheng_feedback::set_has_ucgearctrlstatus() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Ruicheng_feedback::clear_has_ucgearctrlstatus() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Ruicheng_feedback::clear_ucgearctrlstatus() {
  ucgearctrlstatus_ = 0u;
  clear_has_ucgearctrlstatus();
}
inline ::google::protobuf::uint32 Ruicheng_feedback::ucgearctrlstatus() const {
  // @@protoc_insertion_point(field_get:Car_msg.Ruicheng_feedback.ucGearCtrlStatus)
  return ucgearctrlstatus_;
}
inline void Ruicheng_feedback::set_ucgearctrlstatus(::google::protobuf::uint32 value) {
  set_has_ucgearctrlstatus();
  ucgearctrlstatus_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.Ruicheng_feedback.ucGearCtrlStatus)
}

// required uint32 BrakePedalStatus = 7;
inline bool Ruicheng_feedback::has_brakepedalstatus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ruicheng_feedback::set_has_brakepedalstatus() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Ruicheng_feedback::clear_has_brakepedalstatus() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Ruicheng_feedback::clear_brakepedalstatus() {
  brakepedalstatus_ = 0u;
  clear_has_brakepedalstatus();
}
inline ::google::protobuf::uint32 Ruicheng_feedback::brakepedalstatus() const {
  // @@protoc_insertion_point(field_get:Car_msg.Ruicheng_feedback.BrakePedalStatus)
  return brakepedalstatus_;
}
inline void Ruicheng_feedback::set_brakepedalstatus(::google::protobuf::uint32 value) {
  set_has_brakepedalstatus();
  brakepedalstatus_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.Ruicheng_feedback.BrakePedalStatus)
}

// required uint32 CruiseStatus = 8;
inline bool Ruicheng_feedback::has_cruisestatus() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Ruicheng_feedback::set_has_cruisestatus() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Ruicheng_feedback::clear_has_cruisestatus() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Ruicheng_feedback::clear_cruisestatus() {
  cruisestatus_ = 0u;
  clear_has_cruisestatus();
}
inline ::google::protobuf::uint32 Ruicheng_feedback::cruisestatus() const {
  // @@protoc_insertion_point(field_get:Car_msg.Ruicheng_feedback.CruiseStatus)
  return cruisestatus_;
}
inline void Ruicheng_feedback::set_cruisestatus(::google::protobuf::uint32 value) {
  set_has_cruisestatus();
  cruisestatus_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.Ruicheng_feedback.CruiseStatus)
}

// required uint32 ucGearPosition = 9;
inline bool Ruicheng_feedback::has_ucgearposition() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Ruicheng_feedback::set_has_ucgearposition() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Ruicheng_feedback::clear_has_ucgearposition() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Ruicheng_feedback::clear_ucgearposition() {
  ucgearposition_ = 0u;
  clear_has_ucgearposition();
}
inline ::google::protobuf::uint32 Ruicheng_feedback::ucgearposition() const {
  // @@protoc_insertion_point(field_get:Car_msg.Ruicheng_feedback.ucGearPosition)
  return ucgearposition_;
}
inline void Ruicheng_feedback::set_ucgearposition(::google::protobuf::uint32 value) {
  set_has_ucgearposition();
  ucgearposition_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.Ruicheng_feedback.ucGearPosition)
}

// required uint32 uiSpeed = 10;
inline bool Ruicheng_feedback::has_uispeed() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Ruicheng_feedback::set_has_uispeed() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Ruicheng_feedback::clear_has_uispeed() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Ruicheng_feedback::clear_uispeed() {
  uispeed_ = 0u;
  clear_has_uispeed();
}
inline ::google::protobuf::uint32 Ruicheng_feedback::uispeed() const {
  // @@protoc_insertion_point(field_get:Car_msg.Ruicheng_feedback.uiSpeed)
  return uispeed_;
}
inline void Ruicheng_feedback::set_uispeed(::google::protobuf::uint32 value) {
  set_has_uispeed();
  uispeed_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.Ruicheng_feedback.uiSpeed)
}

// required float uiSteerAngle = 11;
inline bool Ruicheng_feedback::has_uisteerangle() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Ruicheng_feedback::set_has_uisteerangle() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Ruicheng_feedback::clear_has_uisteerangle() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Ruicheng_feedback::clear_uisteerangle() {
  uisteerangle_ = 0;
  clear_has_uisteerangle();
}
inline float Ruicheng_feedback::uisteerangle() const {
  // @@protoc_insertion_point(field_get:Car_msg.Ruicheng_feedback.uiSteerAngle)
  return uisteerangle_;
}
inline void Ruicheng_feedback::set_uisteerangle(float value) {
  set_has_uisteerangle();
  uisteerangle_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.Ruicheng_feedback.uiSteerAngle)
}

// -------------------------------------------------------------------

// CS55_control

// required int32 TargetSteeringAngle = 1 [default = 0];
inline bool CS55_control::has_targetsteeringangle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS55_control::set_has_targetsteeringangle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS55_control::clear_has_targetsteeringangle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS55_control::clear_targetsteeringangle() {
  targetsteeringangle_ = 0;
  clear_has_targetsteeringangle();
}
inline ::google::protobuf::int32 CS55_control::targetsteeringangle() const {
  // @@protoc_insertion_point(field_get:Car_msg.CS55_control.TargetSteeringAngle)
  return targetsteeringangle_;
}
inline void CS55_control::set_targetsteeringangle(::google::protobuf::int32 value) {
  set_has_targetsteeringangle();
  targetsteeringangle_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.CS55_control.TargetSteeringAngle)
}

// required uint32 TargetSpeed = 2 [default = 0];
inline bool CS55_control::has_targetspeed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CS55_control::set_has_targetspeed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CS55_control::clear_has_targetspeed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CS55_control::clear_targetspeed() {
  targetspeed_ = 0u;
  clear_has_targetspeed();
}
inline ::google::protobuf::uint32 CS55_control::targetspeed() const {
  // @@protoc_insertion_point(field_get:Car_msg.CS55_control.TargetSpeed)
  return targetspeed_;
}
inline void CS55_control::set_targetspeed(::google::protobuf::uint32 value) {
  set_has_targetspeed();
  targetspeed_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.CS55_control.TargetSpeed)
}

// optional uint32 TargetLedStatus = 3 [default = 0];
inline bool CS55_control::has_targetledstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CS55_control::set_has_targetledstatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CS55_control::clear_has_targetledstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CS55_control::clear_targetledstatus() {
  targetledstatus_ = 0u;
  clear_has_targetledstatus();
}
inline ::google::protobuf::uint32 CS55_control::targetledstatus() const {
  // @@protoc_insertion_point(field_get:Car_msg.CS55_control.TargetLedStatus)
  return targetledstatus_;
}
inline void CS55_control::set_targetledstatus(::google::protobuf::uint32 value) {
  set_has_targetledstatus();
  targetledstatus_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.CS55_control.TargetLedStatus)
}

// optional uint32 LightSwitch = 4 [default = 0];
inline bool CS55_control::has_lightswitch() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CS55_control::set_has_lightswitch() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CS55_control::clear_has_lightswitch() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CS55_control::clear_lightswitch() {
  lightswitch_ = 0u;
  clear_has_lightswitch();
}
inline ::google::protobuf::uint32 CS55_control::lightswitch() const {
  // @@protoc_insertion_point(field_get:Car_msg.CS55_control.LightSwitch)
  return lightswitch_;
}
inline void CS55_control::set_lightswitch(::google::protobuf::uint32 value) {
  set_has_lightswitch();
  lightswitch_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.CS55_control.LightSwitch)
}

// required uint32 SpeedGear = 5 [default = 0];
inline bool CS55_control::has_speedgear() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CS55_control::set_has_speedgear() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CS55_control::clear_has_speedgear() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CS55_control::clear_speedgear() {
  speedgear_ = 0u;
  clear_has_speedgear();
}
inline ::google::protobuf::uint32 CS55_control::speedgear() const {
  // @@protoc_insertion_point(field_get:Car_msg.CS55_control.SpeedGear)
  return speedgear_;
}
inline void CS55_control::set_speedgear(::google::protobuf::uint32 value) {
  set_has_speedgear();
  speedgear_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.CS55_control.SpeedGear)
}

// optional uint32 TimeStamp = 6;
inline bool CS55_control::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CS55_control::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CS55_control::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CS55_control::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 CS55_control::timestamp() const {
  // @@protoc_insertion_point(field_get:Car_msg.CS55_control.TimeStamp)
  return timestamp_;
}
inline void CS55_control::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.CS55_control.TimeStamp)
}

// -------------------------------------------------------------------

// CS55_feedback

// required uint32 EmBrakerStatus = 1;
inline bool CS55_feedback::has_embrakerstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS55_feedback::set_has_embrakerstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS55_feedback::clear_has_embrakerstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS55_feedback::clear_embrakerstatus() {
  embrakerstatus_ = 0u;
  clear_has_embrakerstatus();
}
inline ::google::protobuf::uint32 CS55_feedback::embrakerstatus() const {
  // @@protoc_insertion_point(field_get:Car_msg.CS55_feedback.EmBrakerStatus)
  return embrakerstatus_;
}
inline void CS55_feedback::set_embrakerstatus(::google::protobuf::uint32 value) {
  set_has_embrakerstatus();
  embrakerstatus_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.CS55_feedback.EmBrakerStatus)
}

// required uint32 EpsStatus = 2;
inline bool CS55_feedback::has_epsstatus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CS55_feedback::set_has_epsstatus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CS55_feedback::clear_has_epsstatus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CS55_feedback::clear_epsstatus() {
  epsstatus_ = 0u;
  clear_has_epsstatus();
}
inline ::google::protobuf::uint32 CS55_feedback::epsstatus() const {
  // @@protoc_insertion_point(field_get:Car_msg.CS55_feedback.EpsStatus)
  return epsstatus_;
}
inline void CS55_feedback::set_epsstatus(::google::protobuf::uint32 value) {
  set_has_epsstatus();
  epsstatus_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.CS55_feedback.EpsStatus)
}

// required uint32 TorqueStatus = 3;
inline bool CS55_feedback::has_torquestatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CS55_feedback::set_has_torquestatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CS55_feedback::clear_has_torquestatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CS55_feedback::clear_torquestatus() {
  torquestatus_ = 0u;
  clear_has_torquestatus();
}
inline ::google::protobuf::uint32 CS55_feedback::torquestatus() const {
  // @@protoc_insertion_point(field_get:Car_msg.CS55_feedback.TorqueStatus)
  return torquestatus_;
}
inline void CS55_feedback::set_torquestatus(::google::protobuf::uint32 value) {
  set_has_torquestatus();
  torquestatus_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.CS55_feedback.TorqueStatus)
}

// required uint32 DecStatus = 4;
inline bool CS55_feedback::has_decstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CS55_feedback::set_has_decstatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CS55_feedback::clear_has_decstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CS55_feedback::clear_decstatus() {
  decstatus_ = 0u;
  clear_has_decstatus();
}
inline ::google::protobuf::uint32 CS55_feedback::decstatus() const {
  // @@protoc_insertion_point(field_get:Car_msg.CS55_feedback.DecStatus)
  return decstatus_;
}
inline void CS55_feedback::set_decstatus(::google::protobuf::uint32 value) {
  set_has_decstatus();
  decstatus_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.CS55_feedback.DecStatus)
}

// required uint32 SysStatus = 5;
inline bool CS55_feedback::has_sysstatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CS55_feedback::set_has_sysstatus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CS55_feedback::clear_has_sysstatus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CS55_feedback::clear_sysstatus() {
  sysstatus_ = 0u;
  clear_has_sysstatus();
}
inline ::google::protobuf::uint32 CS55_feedback::sysstatus() const {
  // @@protoc_insertion_point(field_get:Car_msg.CS55_feedback.SysStatus)
  return sysstatus_;
}
inline void CS55_feedback::set_sysstatus(::google::protobuf::uint32 value) {
  set_has_sysstatus();
  sysstatus_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.CS55_feedback.SysStatus)
}

// required uint32 ucGearCtrlStatus = 6;
inline bool CS55_feedback::has_ucgearctrlstatus() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CS55_feedback::set_has_ucgearctrlstatus() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CS55_feedback::clear_has_ucgearctrlstatus() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CS55_feedback::clear_ucgearctrlstatus() {
  ucgearctrlstatus_ = 0u;
  clear_has_ucgearctrlstatus();
}
inline ::google::protobuf::uint32 CS55_feedback::ucgearctrlstatus() const {
  // @@protoc_insertion_point(field_get:Car_msg.CS55_feedback.ucGearCtrlStatus)
  return ucgearctrlstatus_;
}
inline void CS55_feedback::set_ucgearctrlstatus(::google::protobuf::uint32 value) {
  set_has_ucgearctrlstatus();
  ucgearctrlstatus_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.CS55_feedback.ucGearCtrlStatus)
}

// required uint32 BrakePedalStatus = 7;
inline bool CS55_feedback::has_brakepedalstatus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CS55_feedback::set_has_brakepedalstatus() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CS55_feedback::clear_has_brakepedalstatus() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CS55_feedback::clear_brakepedalstatus() {
  brakepedalstatus_ = 0u;
  clear_has_brakepedalstatus();
}
inline ::google::protobuf::uint32 CS55_feedback::brakepedalstatus() const {
  // @@protoc_insertion_point(field_get:Car_msg.CS55_feedback.BrakePedalStatus)
  return brakepedalstatus_;
}
inline void CS55_feedback::set_brakepedalstatus(::google::protobuf::uint32 value) {
  set_has_brakepedalstatus();
  brakepedalstatus_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.CS55_feedback.BrakePedalStatus)
}

// required uint32 CruiseStatus = 8;
inline bool CS55_feedback::has_cruisestatus() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CS55_feedback::set_has_cruisestatus() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CS55_feedback::clear_has_cruisestatus() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CS55_feedback::clear_cruisestatus() {
  cruisestatus_ = 0u;
  clear_has_cruisestatus();
}
inline ::google::protobuf::uint32 CS55_feedback::cruisestatus() const {
  // @@protoc_insertion_point(field_get:Car_msg.CS55_feedback.CruiseStatus)
  return cruisestatus_;
}
inline void CS55_feedback::set_cruisestatus(::google::protobuf::uint32 value) {
  set_has_cruisestatus();
  cruisestatus_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.CS55_feedback.CruiseStatus)
}

// required uint32 ucGearPosition = 9;
inline bool CS55_feedback::has_ucgearposition() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CS55_feedback::set_has_ucgearposition() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CS55_feedback::clear_has_ucgearposition() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CS55_feedback::clear_ucgearposition() {
  ucgearposition_ = 0u;
  clear_has_ucgearposition();
}
inline ::google::protobuf::uint32 CS55_feedback::ucgearposition() const {
  // @@protoc_insertion_point(field_get:Car_msg.CS55_feedback.ucGearPosition)
  return ucgearposition_;
}
inline void CS55_feedback::set_ucgearposition(::google::protobuf::uint32 value) {
  set_has_ucgearposition();
  ucgearposition_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.CS55_feedback.ucGearPosition)
}

// required uint32 uiSpeed = 10;
inline bool CS55_feedback::has_uispeed() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CS55_feedback::set_has_uispeed() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CS55_feedback::clear_has_uispeed() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CS55_feedback::clear_uispeed() {
  uispeed_ = 0u;
  clear_has_uispeed();
}
inline ::google::protobuf::uint32 CS55_feedback::uispeed() const {
  // @@protoc_insertion_point(field_get:Car_msg.CS55_feedback.uiSpeed)
  return uispeed_;
}
inline void CS55_feedback::set_uispeed(::google::protobuf::uint32 value) {
  set_has_uispeed();
  uispeed_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.CS55_feedback.uiSpeed)
}

// required float uiSteerAngle = 11;
inline bool CS55_feedback::has_uisteerangle() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CS55_feedback::set_has_uisteerangle() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CS55_feedback::clear_has_uisteerangle() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CS55_feedback::clear_uisteerangle() {
  uisteerangle_ = 0;
  clear_has_uisteerangle();
}
inline float CS55_feedback::uisteerangle() const {
  // @@protoc_insertion_point(field_get:Car_msg.CS55_feedback.uiSteerAngle)
  return uisteerangle_;
}
inline void CS55_feedback::set_uisteerangle(float value) {
  set_has_uisteerangle();
  uisteerangle_ = value;
  // @@protoc_insertion_point(field_set:Car_msg.CS55_feedback.uiSteerAngle)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Car_msg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Vehicle_2eproto
